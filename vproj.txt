index.html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons' rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.5/jspdf.debug.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.3.6/proj4.js"></script>
    <!--<script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/heatmap.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>-->

    <title>Columbus</title>
  </head>
  <body>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

src> components
claims
AverageByDevPeriod.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 1</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 2</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 3</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 4</v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>
export default {
  name: 'AverageByDevPeriod',

  data () {
      return {
        tab: null,
      }
    }
}
</script>

<style scoped>
    #crd {
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}
</style>

AverageByEventPeriod.vue
<template>
  <v-container grid-list-xl text-xs-center>

  <v-layout row wrap>
      <v-flex xs12 sm12 md12>
          <v-card dark color="secondary" id="crd"><Averageclaims/>
        </v-card>
      </v-flex>
  </v-layout>

  <v-fab-transition>
          <v-btn
            id="crd"
            v-scroll="onScroll"
            v-show="fab"
            fab
            dark
            fixed
            bottom
            right
            color="teal accent-4"
            @click="toTop"
            class="transparent"
          >
            <v-icon>keyboard_arrow_up</v-icon>
          </v-btn>
    </v-fab-transition>

  </v-container>
</template>

<script>
import Averageclaims from './Averageclaims'

export default {
  name: 'Qaenrichmentcompone',

  components: {
    Averageclaims
  },

  data () {
      return {
        tab: null,
        fab: false
      }
  },

  methods: {
      onScroll () {
        if (typeof window === 'undefined') return
        const top = window.pageYOffset ||   document.documentElement.offsetTop || 0
        this.fab = top > 10
      },
      
      toTop () {
        this.$vuetify.goTo(0)
      }
  }
}
</script>

<style scoped>
  #crd{
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}

.transparent{
    opacity: 0.65;
    border-color: transparent!important;
}
</style>

Averageclaims.vue
<template>
    <v-container fluid v-if="avgClaims && avgClaims.length > 0">
        <v-layout row wrap>
            <v-flex xs4>
                <v-select 
                :items="factors"
                v-model="selectedFactor"
                single-line
                :hint="`Approach: ${this.selectedFactor}`"
                persistent-hint
                class="mb-2"
                transition="slide-x-transition"
                @change="calcClaims2"
                ></v-select>
            </v-flex>

            <v-flex xs4>
                <v-select 
                :items="methods"
                v-model="selectedMethod"
                single-line
                :hint="`Method: ${this.selectedMethod}`"
                persistent-hint
                class="mb-2"
                transition="slide-x-transition"
                @change="checkMethod"
                ></v-select>
            </v-flex>

            <v-flex xs4>
              <v-layout row justify-end>
                    <v-dialog v-model="dialog" width="1000px" id="crd">

                        <v-btn id= "crd"
                          color="teal accent-4"
                          flat
                          slot="activator"
                        >
                          <v-icon>zoom_out_map</v-icon>
                        </v-btn>

                <v-card>
                  <v-layout row wrap>
                  <v-flex xs12>
                          <highcharts class="chartContainer" :options="chartOptions" style="height: 800px"></highcharts>
                  </v-flex>
                  </v-layout>
                  
                </v-card>
              </v-dialog>

                </v-layout>
            </v-flex>
        </v-layout>

        <v-layout row wrap>
            <v-flex xs12>
                <highcharts class="chartContainer" :options="chartOptions" style="height: 500px"></highcharts>
            </v-flex>
        </v-layout>
    </v-container>

    <v-container fluid v-else>
        <div class="text-xs-center mt-5"><h3 class="headline mb-0">Please submit Essential Parameters!</h3></div>
    </v-container>
</template>

<script>
  export default {
    data () {
        return {
            dialog: false,
            factors: ['Horizontal','Vertical'],
            selectedFactor: 'Horizontal',
            methods: ['Raw','Linear','Polynomial-2','Polynomial-3'],
            selectedMethod: 'Raw'
        }
    },

    methods: {
        checkMethod(){
            this.$store.commit('claims/updatedMethod', this.selectedMethod)
        },

        calcClaims2(){
            if(this.chartSeries){
                if(this.selectedMethod == this.chartSeries[0].name){
                    this.$store.commit('claims/updatedAvgClaimsExt', this.chartSeries[0].data);
                    this.$store.dispatch('claims/avgClaimsExt')
                }
                else if(this.selectedMethod == this.chartSeries[1].name){
                    this.$store.commit('claims/updatedAvgClaimsExt', this.chartSeries[1].data);
                    this.$store.dispatch('claims/avgClaimsExt')
                }
                else if(this.selectedMethod == this.chartSeries[2].name){
                    this.$store.commit('claims/updatedAvgClaimsExt', this.chartSeries[2].data);
                    this.$store.dispatch('claims/avgClaimsExt')
                }
                else if(this.selectedMethod == this.chartSeries[3].name){
                    this.$store.commit('claims/updatedAvgClaimsExt', this.chartSeries[3].data);
                    this.$store.dispatch('claims/avgClaimsExt')
                }
          }
        }
    },

    computed: {
        avgClaims(){
            return this.$store.getters['claims/avgClaims'](this.selectedFactor);
        },

        avgClaimsExt(){
            return this.$store.getters['claims/avgClaimsExt'];
        },

        updatedEvent1() {
            return this.$store.getters['claims/updatedEvent1'];
        },

        chartSeries(){
            const avgClaimsresult = [];
            const plot = this.avgClaims.map(x => x['data'])
            plot.forEach(function(obj) {
                obj.forEach(function(obj2){
                    avgClaimsresult.push(
                        {name: obj2.method, data: obj2.data})
                    });
            });

            if(avgClaimsresult.length > 0){
            avgClaimsresult[0].color = '#8BC34A';
            avgClaimsresult[1].color = '#F57C00';
            avgClaimsresult[2].color = '#00BFA5';
            avgClaimsresult[3].color = '#616161';
            
            avgClaimsresult[0].marker= { enabled: false };
            avgClaimsresult[1].marker= { enabled: false };
            avgClaimsresult[2].marker= { enabled: false };
            avgClaimsresult[3].marker= { enabled: false };
            
            if(this.selectedMethod == avgClaimsresult[0].name){
                avgClaimsresult[0].lineWidth = 8;
                avgClaimsresult[1].lineWidth = 4;
                avgClaimsresult[2].lineWidth = 4;
                avgClaimsresult[3].lineWidth = 4;

            } else if(this.selectedMethod == avgClaimsresult[1].name){
                avgClaimsresult[0].lineWidth = 4;
                avgClaimsresult[1].lineWidth = 8;
                avgClaimsresult[2].lineWidth = 4;
                avgClaimsresult[3].lineWidth = 4;

            } else if(this.selectedMethod == avgClaimsresult[2].name){
                avgClaimsresult[0].lineWidth = 4;
                avgClaimsresult[1].lineWidth = 4;
                avgClaimsresult[2].lineWidth = 8;
                avgClaimsresult[3].lineWidth = 4;

            } else if(this.selectedMethod == avgClaimsresult[3].name){
                avgClaimsresult[0].lineWidth = 4;
                avgClaimsresult[1].lineWidth = 4;
                avgClaimsresult[2].lineWidth = 4;
                avgClaimsresult[3].lineWidth = 8;
            }
            return avgClaimsresult;
            }
      },

      chartOptions() {
            return {
                chart: { 
                    type: 'line',
                    zoomType: 'x',
                    panning: true,
                    panKey: 'shift'
                },

                title: {
                    text: 'Average Claims'
                },

                credits: {
                    enabled: false
                },

                navigation: {
                    buttonOptions: {
                        symbolStroke: '#8BC34A'
                    }
                },

                xAxis: {
                    crosshair: true,
                    title: {
                        text: 'Event Frequency: ' + this.updatedEvent1
                    }
                },
                
                yAxis: {
                    labels: {
                        format: '{value:, f}'
                    },
                    title: {
                            text: 'Selected Approach: ' + this.selectedFactor
                    }
                },

                tooltip: {
                    formatter: function() {
                        return 'The value for <b>' + this.x + '</b> is <b>' + this.y + '</b> in '+ this.series.name + '.'        
                    }
                },

                series: this.chartSeries,

                plotOptions: {
                    series: {
                        cursor: 'pointer'
                    }
                }
            }
        }
    },

    created: function(){
        this.calcClaims2();
        this.checkMethod();
        //this.$store.dispatch('claims/avgClaims');
    }
  }
</script>

<style scoped>
    #crd {
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
    }
</style>

AverageComponent.vue
<template>
  <v-container grid-list-xl text-xs-center>

  <v-layout row wrap>
      <v-flex xs12 sm12 md12>
          <v-card dark color="secondary" id="crd"><Cdf/>
        </v-card>
      </v-flex>
  </v-layout>

  <v-fab-transition>
          <v-btn
            id="crd"
            v-scroll="onScroll"
            v-show="fab"
            fab
            dark
            fixed
            bottom
            right
            color="teal accent-4"
            @click="toTop"
            class="transparent"
          >
            <v-icon>keyboard_arrow_up</v-icon>
          </v-btn>
    </v-fab-transition>

  </v-container>
</template>

<script>
import Cdf from './Cdf'

export default {
  name: 'Qaenrichmentcompthree',

  components: {
    Cdf
  },

  data () {
      return {
        tab: null,
        fab: false
      }
  },

  methods: {
      onScroll () {
        if (typeof window === 'undefined') return
        const top = window.pageYOffset ||   document.documentElement.offsetTop || 0
        this.fab = top > 10
      },
      
      toTop () {
        this.$vuetify.goTo(0)
      }
  }
}
</script>

<style scoped>
  #crd{
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}

.transparent{
    opacity: 0.65;
    border-color: transparent!important;
}
</style>

AverageElement.vue
<template>
  <v-container grid-list-xl text-xs-center>

  <v-layout row wrap>
      <v-flex xs12 sm12 md12>
          <v-card dark color="secondary" id="crd"><Cdfnew/>
        </v-card>
      </v-flex>
  </v-layout>

  <v-fab-transition>
          <v-btn
            id="crd"
            v-scroll="onScroll"
            v-show="fab"
            fab
            dark
            fixed
            bottom
            right
            color="teal accent-4"
            @click="toTop"
            class="transparent"
          >
            <v-icon>keyboard_arrow_up</v-icon>
          </v-btn>
    </v-fab-transition>

  </v-container>
</template>

<script>
import Cdfnew from './Cdfnew'

export default {
  name: 'Qaenrichmentcompfour',

  components: {
    Cdfnew
  },

  data () {
      return {
        tab: null,
        fab: false
      }
  },

  methods: {
      onScroll () {
        if (typeof window === 'undefined') return
        const top = window.pageYOffset ||   document.documentElement.offsetTop || 0
        this.fab = top > 10
      },
      
      toTop () {
        this.$vuetify.goTo(0)
      }
  }
}
</script>

<style scoped>
  #crd{
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}

.transparent{
    opacity: 0.65;
    border-color: transparent!important;
}
</style>

Cdfnew.vue
<template>
    <v-container fluid v-if="cdf && cdf.length > 0">
        <v-layout row wrap>
            <v-flex xs4>
                <v-select 
                :items="factors"
                v-model="selectedFactor"
                single-line
                :hint="`Coverage: ${this.selectedFactor}`"
                persistent-hint
                class="mb-2"
                transition="slide-x-transition"
                @change="calcClaims"
                ></v-select>
            </v-flex>

            <v-flex xs8>
              <v-layout row justify-end>
                    <v-dialog v-model="dialog" width="1000px" id="crd">

                        <v-btn id= "crd"
                          color="teal accent-4"
                          flat
                          slot="activator"
                        >
                          <v-icon>zoom_out_map</v-icon>
                        </v-btn>

                <v-card>
                  <v-layout row wrap>
                  <v-flex xs12>
                          <highcharts class="chartContainer" :options="chartOptions" style="height: 800px"></highcharts>
                  </v-flex>
                  </v-layout>
                  
                </v-card>
              </v-dialog>

                </v-layout>
            </v-flex>
        </v-layout>

        <v-layout row wrap>
            <v-flex xs12>
                <highcharts class="chartContainer" :options="chartOptions" style="height: 500px"></highcharts>
            </v-flex>
        </v-layout>
    </v-container>

    <v-container fluid v-else>
        <div class="text-xs-center mt-5"><h3 class="headline mb-0">Please submit Essential Parameters!</h3></div>
    </v-container>
</template>

<script>

  export default {
    data () {
        return {
            dialog: false,
            factors: ['ALL','3','6','10'],
            selectedFactor: 'ALL'
        }
    },

    methods: {
        mapValues(key) {
            return this.cdf === undefined ? [] : this.cdf.map(x => x[key])
        },

        calcClaims(){
            this.$store.commit('claims/updatedCoverage', this.selectedFactor)
            this.$store.commit('claims/updatedDevFactors', this.claimSeries);
            this.$store.dispatch('claims/devFactors')
        }
    },

    computed: {
        cdfNew(){
            return this.$store.getters['claims/cdfNew'](this.selectedFactor);
        },

        updatedEvent() {
            return this.$store.getters['claims/updatedEvent'];
        },

        cdf() {
            return this.$store.getters['claims/cdf']
        },

        devFactors(){
            return this.$store.getters['claims/devFactors'];
        },

        chartSeries() {
            const cdfresult = [];
            const plot = this.cdfNew.filter(x => x.data_type === "cdf")
            const plot1 = plot.map(x => x['data'])
            plot1.forEach(function(obj) {
                obj.forEach(function(obj2){
                    cdfresult.push(obj2)
                });
            });

            let series = [];
            series.push(
                {name: 'Selected Coverage: ' + this.selectedFactor, data: cdfresult, marker: { enabled: false }, lineWidth: 8, color: '#8BC34A'},
                {name: 'Education 1', marker: { enabled: false }, lineWidth: 3, data: this.mapValues('Education 1'), color: '#F57C00'},
                {name: 'Education 2', marker: { enabled: false }, lineWidth: 3, data: this.mapValues('Education 2'), color: '#00BFA5'},
                {name: 'Industry Fund', marker: { enabled: false }, lineWidth: 3, data: this.mapValues('Industry Fund'), color: '#616161'}
            );
            return series;
      },

      claimSeries(){
          const devFactor = [];
          const plotdf = this.cdfNew.filter(x => x.data_type === "dev_factor")
          const plotdf1 = plotdf.map(x => x['data'])
          plotdf1.forEach(function(obj) {
                obj.forEach(function(obj2){
                    devFactor.push(obj2)
                }
            );
            });
          return devFactor;
      },

      chartOptions() {
            return {
                chart: { 
                    type: 'spline',
                    zoomType: 'x',
                    panning: true,
                    panKey: 'shift'
                },

                title: {
                    text: 'CDF'
                },

                credits: {
                    enabled: false
                },

                navigation: {
                    buttonOptions: {
                        symbolStroke: '#8BC34A'
                    }
                },

                xAxis: {
                    categories: this.mapValues('Quarter'),
                    title: {
                        text: 'Event Frequency: ' + this.updatedEvent
                    }
                },
                
                yAxis: {
                    min: 0, 
                    max: 1,
                    labels: {
                        formatter: function() {
                            return Math.round((this.value * 100), 2) + '%'
                        }
                    }
                },

                tooltip: {
                    formatter: function() {
                        return 'The value for <b>' + this.x + '</b> is <b>' + this.y + '</b> in '+ this.series.name + '.'
                    }
                },

                series: this.chartSeries,

                plotOptions: {
                    series: {
                        cursor: 'pointer'
                    }
                }
            }
        }
    },

    created: function(){
        this.calcClaims();
        //this.$store.dispatch('claims/cdfNew');
        //this.$store.dispatch('claims/cdf');
        //this.$store.dispatch('claims/devFactors');
    }
  }
</script>

<style scoped>
    #crd {
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
    }
</style>

Claimsqaenrichment.vue
<template>
    <div>
        <v-tabs slot="extension" centered fixed-tabs v-model="tabModel" color="light-green">
          <v-tabs-slider color="white"></v-tabs-slider>
            <v-tab
                v-for="(n, i) in headers"
                :key="i"
                :href="`#tab-${i}`"
            >
                {{ n }}
            </v-tab>
        </v-tabs>
        <v-tabs-items v-model="tabModel">
            <v-tab-item id="tab-0">
                <app-claimsqaenrichmentcompone></app-claimsqaenrichmentcompone>
            </v-tab-item>
            <v-tab-item id="tab-1">
                <app-claimsqaenrichmentcomptwo></app-claimsqaenrichmentcomptwo>
            </v-tab-item>
        </v-tabs-items>
    </div>
</template>

<script>
import Claimsqaenrichmentcompone from './Claimsqaenrichmentcompone'
import Claimsqaenrichmentcomptwo from './Claimsqaenrichmentcomptwo'

  export default {
    components: {
        appClaimsqaenrichmentcompone: Claimsqaenrichmentcompone,
        appClaimsqaenrichmentcomptwo: Claimsqaenrichmentcomptwo
  },

    data () {
      return {
        headers: ['Claimsqaenrichmentcompone', 'Claimsqaenrichmentcomptwo'],
        tabModel: 'tab-0'
      }
    }
  }
</script>

Claimsqaenrichmentcompone.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md12>
        <v-card dark color="secondary" id="crd"><Averageclaims/>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>
import Averageclaims from './Averageclaims'

export default {
  name: 'Qaenrichmentcompone',
  components: {
    Averageclaims
  },

  data () {
      return {
      }
    },

  methods: {
      onScroll () {
        if (typeof window === 'undefined') return
        const top = window.pageYOffset ||   document.documentElement.offsetTop || 0
        this.fab = top > 10
      },
      
      toTop () {
        this.$vuetify.goTo(0)
      }
  }
}
</script>

<style scoped>
#crd {
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}

.transparent{
    opacity: 0.65;
    border-color: transparent!important;
}
</style>

Claimsqaenrichmentcomptwo.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 1</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 2</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 3</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 4</v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>
export default {
  name: 'Qaenrichmentcomptwo',

  data () {
      return {
        tab: null,
      }
    }
}
</script>

<style scoped>
  #crd{
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}
</style>

Claimsrescaling.vue
<template>
    <div>
        <v-tabs slot="extension" centered fixed-tabs v-model="tabModel" color="light-green">
          <v-tabs-slider color="white"></v-tabs-slider>
            <v-tab
                v-for="(n, i) in headers"
                :key="i"
                :href="`#tab-${i}`"
            >
                {{ n }}
            </v-tab>
        </v-tabs>
        <v-tabs-items v-model="tabModel">
            <v-tab-item id="tab-0">
                <app-claimsrescalingcompone></app-claimsrescalingcompone>
            </v-tab-item>
            <v-tab-item id="tab-1">
                <app-claimsrescalingcomptwo></app-claimsrescalingcomptwo>
            </v-tab-item>
        </v-tabs-items>
    </div>
</template>

<script>
import Claimsrescalingcompone from './Claimsrescalingcompone'
import Claimsrescalingcomptwo from './Claimsrescalingcomptwo'

  export default {
    components: {
        appClaimsrescalingcompone: Claimsrescalingcompone,
        appClaimsrescalingcomptwo: Claimsrescalingcomptwo
  },

    data () {
      return {
        headers: ['Claimsrescalingcompone', 'Claimsrescalingcomptwo'],
        tabModel: 'tab-0'
      }
    }
  }
</script>

Claimsrescalingcompone.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 1</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 2</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 3</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 4</v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>

export default {
  name: 'Claimsrescalingcompone',

  data () {
      return {
        tab: null,
      }
    }
}
</script>

<style scoped>
  #crd{
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}
</style>

Claimsrescalingcompone.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 1</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 2</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 3</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 4</v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>

export default {
  name: 'Claimsrescalingcompone',

  data () {
      return {
        tab: null,
      }
    }
}
</script>

<style scoped>
  #crd{
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}
</style>

Claimsrescalingcomptwo.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 1</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 2</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 3</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 4</v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>

export default {
  name: 'Claimsrescalingcomptwo',

  data () {
      return {
        tab: null,
      }
    }
}
</script>

<style scoped>
  #crd{
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}
</style>

Ibnr.vue
<template>
    <div>
        <v-tabs slot="extension" centered fixed-tabs v-model="tabModel" color="light-green">
          <v-tabs-slider color="white"></v-tabs-slider>
            <v-tab
                v-for="(n, i) in headers"
                :key="i"
                :href="`#tab-${i}`"
            >
                {{ n }}
            </v-tab>
        </v-tabs>
        <v-tabs-items v-model="tabModel">
            <v-tab-item id="tab-0">
                <app-averageElement></app-averageElement>
            </v-tab-item>
            <v-tab-item id="tab-1">
                <app-averageByDevPeriod></app-averageByDevPeriod>
            </v-tab-item>
        </v-tabs-items>
    </div>
</template>

<script>
import AverageElement from './AverageElement'
import AverageByDevPeriod from './AverageByDevPeriod'

  export default {
    components: {
        appAverageElement: AverageElement,
        appAverageByDevPeriod: AverageByDevPeriod
  },

    data () {
      return {
        headers: ['AverageElement','AverageByDevPeriod'],
        tabModel: 'tab-0'
      }
    }
  }
</script>

Ipdlr.vue
<template>
    <div>
        <v-tabs slot="extension" centered fixed-tabs v-model="tabModel" color="light-green">
          <v-tabs-slider color="white"></v-tabs-slider>
            <v-tab
                v-for="(n, i) in headers"
                :key="i"
                :href="`#tab-${i}`"
            >
                {{ n }}
            </v-tab>
        </v-tabs>
        <v-tabs-items v-model="tabModel">
            <v-tab-item id="tab-0">
                <app-ipdlrcompone></app-ipdlrcompone>
            </v-tab-item>
            <v-tab-item id="tab-1">
                <app-ipdlrcomptwo></app-ipdlrcomptwo>
            </v-tab-item>
        </v-tabs-items>
    </div>
</template>

<script>
import Ipdlrcompone from './Ipdlrcompone'
import Ipdlrcomptwo from './Ipdlrcomptwo'

  export default {
    components: {
        appIpdlrcompone: Ipdlrcompone,
        appIpdlrcomptwo: Ipdlrcomptwo
  },

    data () {
      return {
        headers: ['Ipdlrcompone', 'Ipdlrcomptwo'],
        tabModel: 'tab-0'
      }
    }
  }
</script>

Ipdlrcompone.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 1</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 2</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 3</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 4</v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>

export default {
  name: 'Ipdlrcompone',

  data () {
      return {
        tab: null,
      }
    }
}
</script>

<style scoped>
  #crd {
    -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
  }
</style>

Ipdlrcomptwo.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 1</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 2</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 3</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 4</v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>

export default {
  name: 'Ipdlrcomptwo',

  data () {
      return {
        tab: null,
      }
    }
}
</script>

<style scoped>
  #crd {
    -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
  }
</style>

Iptermination.vue
<template>
    <div>
        <v-tabs slot="extension" centered fixed-tabs v-model="tabModel" color="light-green">
          <v-tabs-slider color="white"></v-tabs-slider>
            <v-tab
                v-for="(n, i) in headers"
                :key="i"
                :href="`#tab-${i}`"
            >
                {{ n }}
            </v-tab>
        </v-tabs>
        <v-tabs-items v-model="tabModel">
            <v-tab-item id="tab-0">
                <app-ipterminationcompone></app-ipterminationcompone>
            </v-tab-item>
            <v-tab-item id="tab-1">
                <app-ipterminationcomptwo></app-ipterminationcomptwo>
            </v-tab-item>
        </v-tabs-items>
    </div>
</template>

<script>
import Ipterminationcompone from './Ipterminationcompone'
import Ipterminationcomptwo from './Ipterminationcomptwo'

  export default {
    components: {
        appIpterminationcompone: Ipterminationcompone,
        appIpterminationcomptwo: Ipterminationcomptwo
  },

    data () {
      return {
        headers: ['Ipterminationcompone', 'Ipterminationcomptwo'],
        tabModel: 'tab-0'
      }
    }
  }
</script>

Ipterminationcompone.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 1</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 2</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 3</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 4</v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>

export default {
  name: 'Ipterminationcompone',

  data () {
      return {
        tab: null,
      }
    }
}
</script>

<style scoped>
  #crd {
    -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
  }
</style>

Ipterminationcomptwo.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 1</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 2</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 3</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 4</v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>

export default {
  name: 'Ipterminationcomptwo',

  data () {
      return {
        tab: null,
      }
    }
}
</script>

<style scoped>
  #crd {
    -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
  }
</style>

information
UserInfo.vue
<template>
    <v-stepper v-model="e1" vertical>
        
    <v-stepper-header id="crd">
      <v-stepper-step :complete="e1 > 1" step="1" color="teal accent-4">Essential Parameters</v-stepper-step>

      <v-divider></v-divider>

      <v-stepper-step :complete="e1 > 2" step="2" color="orange darken-2">Optional Parameters</v-stepper-step>

    </v-stepper-header>

    <v-stepper-items>

      <v-stepper-content step="1">
        <v-layout justify-center>
          {{showInfo}}
    <v-flex xs6>
                <v-form ref="form" v-model="valid" lazy-validation>

                    <v-select
                    v-model="selectFund"
                    :items="funds"
                    :rules="[v => !!v || 'Fund is required']"
                    label="Fund"
                    required
                    ></v-select>

                    <v-select
                    v-model="selectCovertype"
                    :items="covertypes"
                    :rules="[v => !!v || 'Type Cover is required']"
                    label="Type Cover"
                    required
                    @input="checkCoverType"
                    ></v-select>

                    <v-select
                    v-model="selectGroup"
                    :items="groups"
                    label="To be implemented"
                    disabled
                    persistent-hint
                    hint="Group variables"
                    @input="checkGroup"
                    ></v-select>

                    <v-select
                    v-model="selectEvent"
                    :items="events"
                    :rules="[v => !!v || 'Event Frequency is required']"
                    label="Event Frequency"
                    required
                    @input="checkEvent"
                    ></v-select>

                    <v-menu
                        ref="menu"
                        :close-on-content-click="false"
                        v-model="menu"
                        :nudge-right="40"
                        lazy
                        transition="scale-transition"
                        offset-y
                        full-width
                        min-width="290px"
                      >
                        <v-text-field
                          slot="activator"
                          v-model="startDate"
                          label="Date Start"
                          prepend-icon="event"
                          readonly
                        ></v-text-field>
                        <v-date-picker
                          ref="picker"
                          v-model="startDate"
                          :max="new Date().toISOString().substr(0, 10)"
                          min= "2000-01-01"
                        ></v-date-picker>
                      </v-menu>

                      <v-menu
                        ref="menu1"
                        :close-on-content-click="false"
                        v-model="menu1"
                        :nudge-right="40"
                        lazy
                        transition="scale-transition"
                        offset-y
                        full-width
                        min-width="290px"
                      >
                        <v-text-field
                          slot="activator"
                          v-model="valDate"
                          label="Valuation Date"
                          prepend-icon="event"
                          readonly
                        ></v-text-field>
                        <v-date-picker
                          ref="picker"
                          v-model="valDate"
                          :max="new Date().toISOString().substr(0, 10)"
                        ></v-date-picker>
                      </v-menu>
                </v-form>
</v-flex>
</v-layout>

        <br>
        <div class="text-xs-center mt-3">
        <v-btn id="crd" large
          @click="e1 = 2"
          color="light-green"
        >
          Continue
        </v-btn>

        </div>
      </v-stepper-content>

      <v-stepper-content step="2">
        <v-layout justify-center>
        <v-flex xs6>
                <v-form ref="form" v-model="valid" lazy-validation>

                    <v-text-field
                      v-model="selectDevDuration"
                      label="Max Dev Duration"
                      outline
                      disabled
                    ></v-text-field>

                    <v-text-field
                      v-model="selectPendingFactorAmount"
                      label="Pending Factor Amount"
                      outline
                      disabled
                    ></v-text-field>

                    <v-text-field
                      v-model="selectPendingFactorCount"
                      label="Pending Factor Count"
                      outline
                      disabled
                    ></v-text-field>
                </v-form>
</v-flex>
</v-layout>

    <br>
        <div class="text-xs-center mt-3">
        <v-btn id="crd" large
          color="teal accent-4"
          :disabled="!valid"
          @click="submit"
        >
          submit
        </v-btn>

        <v-btn id="crd" large
          @click="e1 = 1"
          color="orange darken-2"
        >
          Back
        </v-btn>
        </div>

      </v-stepper-content>


      <v-stepper-content step="3">
        <v-layout justify-center class="light-green"
                           id="crd">
                          Thanks for submitting
        </v-layout>
      </v-stepper-content>
    </v-stepper-items>
  </v-stepper>
</template>

<script>
  export default {
    data () {
      return {
            e1: 0,
            valid: true,
            selectFund: null,
            selectCovertype: null,
            selectEvent: null,
            selectGroup: null,
            //startDate: null,
            funds: [],
            covertypes: [],
            groups:[],
            events:[],
            dates:[],
            checkbox: false,
            startDate: '2007-01-01',
            valDate: '2015-12-31',
            menu1: false,
            mindate: null,
            selectDevDuration: 67,
            durations: [67],
            selectPendingFactorAmount: 1,
            pendingFactorAmounts: [1],
            selectPendingFactorCount: 0.981,
            pendingFactorCounts: [0.981],
            menu: false,
            modal: false,
            menu2: false
      }
    },

    computed: {
      info() {
          return this.$store.getters['information/info']
      },

      showInfo() {
        const fund = this.info.map(x => x['info_value'])
        if(fund[0] != undefined){
          this.funds.push(fund[0]);
        }
        
        const covertype = this.info.map(x => x['info_value'])
        if(covertype[1] != undefined && covertype[2] != undefined && covertype[3] != undefined){
          this.covertypes.push(covertype[1], covertype[2], covertype[3]);
        }

        const event = this.info.map(x => x['info_value'])
        if(event[4] != undefined && event[5] != undefined && event[6] != undefined && event[7] != undefined){
          this.events.push(event[4], event[5], event[6], event[7]);
        }

        const group = this.info.map(x => x['info_value'])
        if(group[8] != undefined && group[9] != undefined && group[10] != undefined && group[11] != undefined){
          this.groups.push(group[8], group[9], group[10], group[11]);
        }
      }
    },

    watch: {
      menu (val) {
        val && this.$nextTick(() => (this.$refs.picker.activePicker = 'DATE'))
      },

      menu1 (val) {
        val && this.$nextTick(() => (this.$refs.picker.activePicker = 'DATE'))
      }
    },

    methods: {
      checkCoverType () {
        this.$store.commit('membership/updatedCovertype', this.selectCovertype)
        this.$store.commit('claims/updatedCovertype', this.selectCovertype)
        this.$store.commit('claims/updatedCovertypeAvgClaims', this.selectCovertype)
      },

      checkGroup () {
        //console.log(this.selectGroup)
      },

      checkEvent () {
        this.$store.commit('membership/updatedEvent', this.selectEvent)
        this.$store.commit('claims/updatedEvent', this.selectEvent)
        this.$store.commit('claims/updatedEventAvgClaims', this.selectEvent)
      },

      checkStartDate () {
        this.$store.commit('membership/updatedStartDate', this.startDate)
        this.$store.commit('claims/updatedStartDate', this.startDate)
        this.$store.commit('claims/updatedStartDateAvgClaims', this.startDate)
      },

      checkValuationDate () {
        this.$store.commit('membership/updatedValDate', this.valDate)
        this.$store.commit('claims/updatedValDate', this.valDate)
        this.$store.commit('claims/updatedValDateAvgClaims', this.valDate)
      },

      async submit () {
        if (this.$refs.form.validate()) {
          //console.log(localStorage);
          this.e1 = 3;
          await this.$store.dispatch('membership/fetchPremiumNew');
          await this.$store.dispatch('claims/cdfNew');
          await this.$store.dispatch('claims/cdf');
          await this.$store.dispatch('claims/avgClaims');
        }
      }
    },

    mounted(){
      this.checkStartDate ();
      this.checkValuationDate ();
    },

    created: function(){
        this.$store.dispatch('information/fetchInfo');
    }
  }
</script>

<style scoped>
#crd{
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}
</style>

lossratio
Decision.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Decision 1</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Decision 2</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Decision 3</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Decision 4</v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>

export default {
  name: 'Decision',

  data () {
      return {
        tab: null,
      }
    }
}
</script>

<style scoped>
    #crd {
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}
</style>

Lossratiocalc.vue
<template>
  <v-container fluid>
    <v-layout row wrap>
    <v-flex xs4>
        <v-card dark color="light-green" id="crd">
          <v-card-text class="px-0">Type Cover: {{updatedCovertype}}</v-card-text>
        </v-card>
    </v-flex>

    <v-flex xs4>
        <v-card dark color="teal accent-4" id="crd">
          <v-card-text class="px-0">Event Frequency:{{updatedEvent}}</v-card-text>
        </v-card>
    </v-flex>

    <v-flex xs4>
        <v-card dark color="light-green" id="crd">
          <v-card-text class="px-0">Start Date: {{updatedStartdate}}</v-card-text>
        </v-card>
    </v-flex>
    </v-layout>

    <v-layout row wrap>
    <v-flex xs4>
        <v-card dark color="teal accent-4" id="crd">
          <v-card-text class="px-0">Valuation Date: {{updatedValdate}}</v-card-text>
        </v-card>
    </v-flex>

    <v-flex xs4>
        <v-card dark color="light-green" id="crd">
          <v-card-text class="px-0">Selected Method: {{updatedMethod}}</v-card-text>
        </v-card>
    </v-flex>

    <v-flex xs4>
        <v-card dark color="teal accent-4" id="crd">
          <v-card-text class="px-0">Selected Coverage: {{updatedCoverage}}</v-card-text>
        </v-card>
    </v-flex>
    </v-layout>

        <div id="loading" v-if="loadingLoss">
            <v-progress-circular id="loader" indeterminate color="orange darken-2"
                :rotate="300"
                :size="100"
                :width="12"
                >
            </v-progress-circular>
        </div>

            <v-layout row wrap>
            <v-flex xs12>
              <v-layout row justify-end>
              <v-dialog v-model="dialog" width="1000px" id="crd">

                        <v-btn id= "crd"
                          color="teal accent-4"
                          flat
                          slot="activator"
                        >
                          <v-icon>zoom_out_map</v-icon>
                        </v-btn>

                <v-card>
                  <v-layout row wrap>
                  <v-flex xs12>
                          <highcharts class="chartContainer" :options="chartOptions" style="height: 800px"></highcharts>
                  </v-flex>
                  </v-layout>
                  
                </v-card>
              </v-dialog>
          </v-layout>
        </v-flex>
        </v-layout>

        <v-layout row wrap>
            <v-flex xs12>
                <highcharts class="chartContainer" :options="chartOptions" style="height: 500px"></highcharts>
            </v-flex>
        </v-layout>
    </v-container>
</template>

<script>

export default {
  name: 'Lrcalc',

  data () {
      return {
        tab: null,
        dialog: false
      }
    },

    methods: {
      submit(){
        this.$store.dispatch('claims/devFactors');
        this.$store.dispatch('claims/avgClaimsExt');
        this.$store.commit('claims/calcLossRatio', this.$store.dispatch('claims/devFactors'));
        this.$store.commit('claims/calcLossRatio', this.$store.dispatch('claims/avgClaimsExt'));
        this.afterSubmit();
      },

      afterSubmit(){
        this.$store.dispatch('claims/calcLossRatio');
      }
    },

    computed: {
        updatedEvent() {
            return this.$store.getters['claims/updatedEvent'];
        },

        updatedCovertype() {
            return this.$store.getters['claims/updatedCovertype'];
        },

        updatedStartdate() {
            return this.$store.getters['claims/updatedStartDate'];
        },

        updatedValdate() {
            return this.$store.getters['claims/updatedValDate'];
        },

        updatedMethod() {
            return this.$store.getters['claims/updatedMethod'];
        },

        updatedCoverage() {
            return this.$store.getters['claims/updatedCoverage'];
        },

        loadingLoss() {
            return this.$store.getters['claims/loadingLoss']
        },

        plotChart(){
            //console.log(this.$store.getters['claims/calcLossRatio'])
            return this.$store.getters['claims/calcLossRatio'];
        },

        pushList(){
            this.items.push(
            {header: this.updatedEvent},
            );
        },

        chartseries(){
            var totalPremium = [];
            var totalTotal = [];
            var totalLr = [];
            for(var i=0; i<this.plotChart.length; i++){
                totalPremium.push(this.plotChart[i].Prop_Premium);
                totalTotal.push(this.plotChart[i].Prop_Claims);
                totalLr.push(this.plotChart[i].LR);
            }
            var newie = [];
            newie.push({Value: totalLr, Value1: totalPremium, Value2: totalTotal});
            let series = [];
            series.push(
            {name: "Loss Ratio", data: totalLr, color: '#8BC34A', type: 'column', yAxis: 0},    
            {name: "Premium", data: totalPremium, color: '#00BFA5', type: 'line', yAxis: 1},
            {name: "Claims", data: totalTotal, color: '#F57C00', type: 'line', yAxis: 1}
            );
            return series
        },

        chartOptions() {
            return {
                chart: { 
                    zoomType: 'x',
                    panning: true,
                    panKey: 'shift'
                },

                title: {
                    text: 'Loss Ratio'
                },

                credits: {
                    enabled: false
                },

                navigation: {
                    buttonOptions: {
                        symbolStroke: '#8BC34A'
                    }
                },

                xAxis: {
                    crosshair: true,
                    title: {
                        text: 'Event Frequency: ' + this.updatedEvent
                    }
                },
                
                yAxis: [
                    {
                        min: 0,
                        labels: {
                            formatter: function() {
                                return Math.round((this.value * 100), 2) + '%'
                            }
                        },
                        title: {
                            text: 'Loss Ratio'
                        }
                    },
                    {
                        min: 0,
                        labels: {
                            formatter: function() {
                                return Math.round((this.value * 100), 2) + '%'
                            }
                        },
                        title: {
                            text: '% Claims/Premium'
                        },
                        opposite: true
                    }
                ],

                plotOptions: {
                    column: {
                        borderRadius: 5
                    }
                },

                tooltip: {
                    formatter: function() {
                        return 'The value for <b>' + this.x + '</b> is <b>' + this.y + '</b> in '+ this.series.name + '.'   
                    }
                },

                series: this.chartseries
            }
        }
    },

    created(){
        this.$store.dispatch('claims/devFactors');
        this.$store.dispatch('claims/avgClaimsExt');
        this.$store.commit('claims/calcLossRatio', this.$store.dispatch('claims/devFactors'));
        this.$store.commit('claims/calcLossRatio', this.$store.dispatch('claims/avgClaimsExt'));
        this.afterSubmit();
    }
}
</script>

<style scoped>
    #crd {
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
    }

    #loading {
        position: absolute;
        z-index: 1000;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
    }

    #loader {
        margin: auto;
        position: absolute;
        top: 0; 
        left: 0; 
        bottom: 0; 
        right: 0;
    }
</style>

Lossratioholder.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md12>
        <v-card dark color="secondary" id="crd"><Lossratiocalc/>
        </v-card>
      </v-flex>
    </v-layout>

    <v-fab-transition>
          <v-btn
            id="crd"
            v-scroll="onScroll"
            v-show="fab"
            fab
            dark
            fixed
            bottom
            right
            color="teal accent-4"
            @click="toTop"
            class="transparent"
          >
            <v-icon>keyboard_arrow_up</v-icon>
          </v-btn>
      </v-fab-transition>
  
  </v-container>
</template>

<script>
import Lossratiocalc from './Lossratiocalc'

export default {
  name: 'Lossratioholder',
  components: {
    Lossratiocalc
  },

  data () {
      return {
        tab: null,
        fab: false
      }
    },

  methods: {
      onScroll () {
        if (typeof window === 'undefined') return
        const top = window.pageYOffset ||   document.documentElement.offsetTop || 0
        this.fab = top > 10
      },
      
      toTop () {
        this.$vuetify.goTo(0)
      }
  }
}
</script>

<style scoped>
    #crd {
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}

.transparent{
    opacity: 0.65;
    border-color: transparent!important;
}
</style>

Lr.vue
<template>
    <div>
        <v-tabs slot="extension" centered fixed-tabs v-model="tabModel" color="light-green">
          <v-tabs-slider color="white"></v-tabs-slider>
            <v-tab
                v-for="(n, i) in headers"
                :key="i"
                :href="`#tab-${i}`"
            >
                {{ n }}
            </v-tab>
        </v-tabs>
        <v-tabs-items v-model="tabModel">
            <v-tab-item id="tab-0">
                <app-lossratioholder></app-lossratioholder>
            </v-tab-item>
            <v-tab-item id="tab-1">
                <app-decision></app-decision>
            </v-tab-item>
        </v-tabs-items>
    </div>
</template>

<script>
import Lossratioholder from './Lossratioholder'
import Decision from './Decision'

  export default {
    components: {
        appLossratioholder: Lossratioholder,
        appDecision: Decision
  },

    data () {
      return {
        headers: ['Graphs', 'Decision'],
        tabModel: 'tab-0'
      }
    }
  }
</script>

member
Premiumnewest.vue
<template>
    <v-container fluid v-if="premiumNew && premiumNew.length > 0">
        
        <div id="loading" v-if="loadingPremium">
            <v-progress-circular id="loader" indeterminate color="light-green"
                :rotate="300"
                :size="100"
                :width="15"
                >
            </v-progress-circular>
        </div>

        <v-layout row wrap>
            <v-flex xs12>
              <v-layout row justify-end>
  
              <v-dialog v-model="dialog" width="1000px" id="crd">

                        <v-btn id= "crd"
                          color="teal accent-4"
                          flat
                          slot="activator"
                        >
                          <v-icon>zoom_out_map</v-icon>
                        </v-btn>

                <v-card>
                  <v-layout row wrap>
                  <v-flex xs12 >
                          <highcharts class="chartContainer" :options="chartOptions" style="height: 800px"></highcharts>
                  </v-flex>
                  </v-layout>
                  
                </v-card>
              </v-dialog>
          </v-layout>
        </v-flex>
        </v-layout>

        <v-layout row wrap>
            <v-flex xs12>
                <highcharts class="chartContainer" :options="chartOptions" style="height: 500px"></highcharts>
            </v-flex>
        </v-layout>
    </v-container>

    <v-container fluid v-else>
        <div class="text-xs-center mt-5"><h3 class="headline mb-0">Please submit Essential Parameters!</h3></div>
    </v-container>
</template>

<script>
  export default {
    data () {
        return {
            dialog: false
        }
    },

    computed: {
      updatedEvent() {
        return this.$store.getters['membership/updatedEvent'];
      },

      loadingPremium() {
        return this.$store.getters['membership/loadingPremium']
      },

      premiumNew(){
        return this.$store.getters['membership/premiumNew'];
      },

        chartSeries() {
            var totalNew = [];
            for(var i=0; i<this.premiumNew.length; i++){
                totalNew.push(this.premiumNew[i].Premium);
            }
            var newie = [];
            newie.push({Value: totalNew});
            let series = [];
            series.push({name: "Premium", data: totalNew, color: '#00BFA5'});
            return series
      },

      chartOptions() {
            return {
                chart: {
                    type: 'column',
                    zoomType: 'x',
                    panning: true,
                    panKey: 'shift'
                },

                title: {
                    text: 'Premium Rescaling'
                },

                navigator :{
                    enabled: true
                },

                scrollbar :{
                    enabled: true
                },

                legend :  {
                    enabled : true
                },

                credits: {
                    enabled: false
                },

                xAxis: {
                    categories: this.premiumNew.map(x => x['origin']),
                    crosshair: true,
                    title: {
                        text: 'Event Frequency: ' + this.updatedEvent
                    },
                    labels: {
                        rotation: 270
                    }
                },

                yAxis: {
                    labels: {
                        format: '{value:, f}'
                    },
                    title: {
                            text: 'Premium Rescaled'
                    }
                },

                plotOptions: {
                    column: {
                        borderRadius: 5
                    }
                },

                tooltip: {
                    formatter: function() {
                        return 'The value for <b>' + this.x + '</b> is <b>' + this.y + '</b> in '+ this.series.name + '.'        
                    }
                },

                series: this.chartSeries,

                navigation: {
                    buttonOptions: {
                        symbolStroke: '#8BC34A'
                    }
                }

            }
        }
    },

    created: function(){
        //this.$store.dispatch('membership/fetchPremiumNew');
    }
  }
</script>

<style scoped>
    #loading {
        position: absolute;
        z-index: 1000;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
    }

    #loader {
        margin: auto;
        position: absolute;
        top: 0; 
        left: 0; 
        bottom: 0; 
        right: 0;
    }

    #crd {
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}
</style>

Premiumrescalingcompone.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md12>
        <v-card dark color="secondary" id="crd"><Premiumnewest/></v-card>
      </v-flex>
    </v-layout>

    <v-fab-transition>
          <v-btn
            id="crd"
            v-scroll="onScroll"
            v-show="fab"
            fab
            dark
            fixed
            bottom
            right
            color="teal accent-4"
            @click="toTop"
            class="transparent"
          >
            <v-icon>keyboard_arrow_up</v-icon>
          </v-btn>
      </v-fab-transition>

  </v-container>
</template>

<script>
import Premiumnewest from './Premiumnewest'

export default {
  name: 'Premiumrescalingcompone',

  components: {
    Premiumnewest
  },

  data () {
      return {
        tab: null,
        fab: false
      }
    },

    methods: {
      onScroll () {
        if (typeof window === 'undefined') return
        const top = window.pageYOffset ||   document.documentElement.offsetTop || 0
        this.fab = top > 10
      },
      
      toTop () {
        this.$vuetify.goTo(0)
      }
  }
}
</script>

<style scoped>
    #crd {
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}

.transparent{
    opacity: 0.65;
    border-color: transparent!important;
}
</style>

Premiumrescalingcomptwo.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Element 1</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Element 2</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Element 3</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Element 4</v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>

export default {
  name: 'Premiumrescalingcomptwo',

  data () {
      return {
        tab: null,
      }
    }
}
</script>

<style scoped>
    #crd {
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}
</style>

Qaenrichment.vue
<template>
    <div>
        <v-tabs slot="extension" centered fixed-tabs v-model="tabModel" color="light-green">
          <v-tabs-slider color="white"></v-tabs-slider>
            <v-tab
                v-for="(n, i) in headers"
                :key="i"
                :href="`#tab-${i}`"
            >
                {{ n }}
            </v-tab>
        </v-tabs>
        <v-tabs-items v-model="tabModel">
            <v-tab-item id="tab-0">
                <app-qaenrichmentcompone></app-qaenrichmentcompone>
            </v-tab-item>
            <v-tab-item id="tab-1">
                <app-qaenrichmentcomptwo></app-qaenrichmentcomptwo>
            </v-tab-item>
        </v-tabs-items>
    </div>
</template>

<script>
import Qaenrichmentcompone from './Qaenrichmentcompone'
import Qaenrichmentcomptwo from './Qaenrichmentcomptwo'

  export default {
    components: {
        appQaenrichmentcompone: Qaenrichmentcompone,
        appQaenrichmentcomptwo: Qaenrichmentcomptwo
  },

    data () {
      return {
        headers: ['Qaenrichmentcompone', 'Qaenrichmentcomptwo'],
        tabModel: 'tab-0'
      }
    }
  }
</script>

Qaenrichmentcompone.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 1</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 2</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 3</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 4</v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>
export default {
  name: 'Qaenrichmentcompone',

  data () {
      return {
        tab: null,
      }
    }
}
</script>

<style scoped>
    #crd {
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}
</style>

Qaenrichmentcomptwo.vue
<template>
  <v-container grid-list-xl text-xs-center>
    <v-layout row wrap>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 1</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 2</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 3</v-card-text>
        </v-card>
      </v-flex>
      <v-flex xs12 sm12 md6>
        <v-card dark color="secondary" id="crd">
            <v-card-text class="px-0">Component 4</v-card-text>
        </v-card>
      </v-flex>
    </v-layout>
  </v-container>
</template>

<script>
export default {
  name: 'Qaenrichmentcomptwo',

  data () {
      return {
        tab: null,
      }
    }
}
</script>

<style scoped>
    #crd {
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}
</style>

page
Home.vue
<template>
<v-container>
  <v-carousel id="crd"
  delimiter-icon="stop"
  >
    <v-carousel-item
      v-for="(item,i) in items"
      :key="i"
      :src="item.src"
    ></v-carousel-item>
  </v-carousel>

  <v-jumbotron>
      <v-layout align-center>
        <v-flex>
          <h3 class="display-3">
            COLUMBUS</h3>

          <span class="subheading">Columbus Software provides our clients the best software based platform to ease the tasks. Clients' recommendations are our first priority.</span>

          <v-divider class="my-3"></v-divider>

          <div class="title mb-3">Please Check out features</div>

          <div class="text-xs-center">
          <v-flex xs12>
            <v-card id="crd">
            <span class="headline3">READY?</span><br>
            <span>Continue to scroll down and modify the settings. Come back and click this when ready to render new plots.</span><br>
            <span class="grey--text">BASIC ENVIRONMENT</span><br>
            <span>Explore and Experience the New</span><br>
            <span class="grey--text">VERSION CONTROL</span><br>
            <span>Version 1.0.0</span><br>
            <span>Deployed on 30-Aug-2018</span><br>
            <span><a href="https://about.gitlab.com/">Code on Gitlab</a></span><br>
            </v-card>
          </v-flex>
          </div>
        </v-flex>
      </v-layout>
  </v-jumbotron>

  <v-layout row wrap align-center>
              <v-flex xs12 md4>
                  <v-card class="elevation-0 transparent">
                    <v-card-text class="text-xs-center">
                      <v-icon x-large class="light-green--text">apps</v-icon>
                    </v-card-text>
                    <v-card-title primary-title class="layout justify-center">
                      <div class="headline text-xs-center">Software Apps</div>
                    </v-card-title>
                    <v-card-text>
                      Our software application is designed to perform a group of coordinated functions, tasks, or activities for the benefit of the user.
                      Applications may be bundled with the computer and its system software or published separately, and may be coded as proprietary, open-source or university projects. Apps built for mobile platforms are called mobile apps.
                    </v-card-text>
                  </v-card>
                </v-flex>
                <v-flex xs12 md4>
                  <v-card class="elevation-0 transparent">
                    <v-card-text class="text-xs-center">
                      <v-icon x-large class="teal--text text--accent-4">storage</v-icon>
                    </v-card-text>
                    <v-card-title primary-title class="layout justify-center">
                      <div class="headline">Database Solution</div>
                    </v-card-title>
                    <v-card-text>
                      We provide database solution.Database designers typically organize the data to model aspects of reality in a way that supports processes requiring information, such as modeling the availability of rooms in hotels in a way that supports finding a hotel with vacancies.
                    </v-card-text>
                  </v-card>
                </v-flex>
                <v-flex xs12 md4>
                  <v-card class="elevation-0 transparent">
                    <v-card-text class="text-xs-center">
                      <v-icon x-large class="orange--text text--darken-2">security</v-icon>
                    </v-card-text>
                    <v-card-title primary-title class="layout justify-center">
                      <div class="headline text-xs-center">System Security</div>
                    </v-card-title>
                    <v-card-text>
                      Providing system security, cybersecurity or IT security is the protection we ensure for  computer systems from damage to hardware, software or electronic data, as well as from disruption or misdirection of the services they provide.
                      The field is of growing importance due to increasing reliance on computer systems.
                    </v-card-text>
                  </v-card>
                </v-flex>
    </v-layout>

    <v-layout row wrap align-center>
      <v-flex xs12>
      <v-parallax src="https://cdn.vuetifyjs.com/images/carousel/planet.jpg" height="400" id="crd">
          <v-layout column align-center justify-center>
            <div class="headline white--text mb-3 text-xs-center">Web Applications provide solutions</div>
            <em>All solutions in one go</em>
            <v-btn id="crd"
              class="teal accent-4"
              large
              href="https://about.gitlab.com/"
            >
              Explore
            </v-btn>
          </v-layout>
        </v-parallax>
        </v-flex>
      </v-layout>
              
    <v-fab-transition>
          <v-btn
            id="crd"
            v-scroll="onScroll"
            v-show="fab"
            fab
            dark
            fixed
            bottom
            right
            color="teal accent-4"
            @click="toTop"
            class="transparent"
          >
            <v-icon>keyboard_arrow_up</v-icon>
          </v-btn>
    </v-fab-transition>
 </v-container>

</template>

<script>

  export default {
    data () {
      return {
        tile: false,
        fab: false,
        items: [
          {
            src: 'http://jasonyesser.com/wp-content/uploads/2014/03/Black-and-Green-Abstract-HD-Background.jpg'
          },
          {
            src: 'https://cdn.vuetifyjs.com/images/parallax/material.jpg'
          },
          {
            src: 'https://cdn.vuetifyjs.com/images/parallax/material2.jpg'
          }
        ]
      }
    },

    methods: {
      onScroll () {
        if (typeof window === 'undefined') return
        const top = window.pageYOffset ||   document.documentElement.offsetTop || 0
        this.fab = top > 10
      },
      
      toTop () {
        this.$vuetify.goTo(0)
      }
    }
  }
</script>

<style scoped>
  #crd{
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}

.transparent{
    opacity: 0.65;
    border-color: transparent!important;
}
</style>

Notfound.vue
<template>
    <div class="text-xs-center mt-5"><h3 class="headline mb-0">Sorry, Page Not Found!</h3></div>
</template>

<script>
export default {
    
}
</script>

lib
adalUtils.js
import { AuthenticationContext } from 'vue-adal'

const authInfo = {
    tenant: 'fedfd771-b82e-47b1-a705-959f02fe7ded', // 'common' (multi-tenant gateway) or Azure AD Tenant ID    
    clientId: '2245d8d3-c60d-41d4-988f-712d706aeda1', // Application ID  
}

export const getTokenInfo = async () => {
    let tokenInfo = null
    AuthenticationContext.acquireToken(authInfo.clientId, (err, token) => {
        if (err) {
            tokenInfo = {
                code: err,
                token: ''
            }
        } else {
            tokenInfo = {
                code: null,
                token: token
            }
        }
    })
    return tokenInfo
}

http.js
export default
    {
        "baseUrlLink": "http://192.168.99.100:5000"
    }
    
router
index.js
import Vue from 'vue'
import Router from 'vue-router'
import vueResource from 'vue-resource'
import axios from 'axios'
import Vuex from 'vuex'
import Home from '@/components/page/Home'
import Notfound from '@/components/page/Notfound'
import Lr from '@/components/lossratio/Lr'
import Test from '@/components/lossratio/Test'
import Qaenrichment from '@/components/member/Qaenrichment'
import Premiumrescaling from '@/components/member/Premiumrescaling'
import Claimsqaenrichment from '@/components/claims/Claimsqaenrichment'
import Claimsrescaling from '@/components/claims/Claimsrescaling'
import Iptermination from '@/components/claims/Iptermination'
import Ipdlr from '@/components/claims/Ipdlr'
import Ibnr from '@/components/claims/Ibnr'
import UserInfo from '@/components/information/UserInfo'

Vue.use(Router)
Vue.use(vueResource)
Vue.use(Vuex)
window.axios = axios

export default new Router({
  mode: 'history',
  routes: [
    {
      path: '/',
      name: 'Home',
      component: Home
    },
    {
      path: '/lossratio',
      name: 'Lr',
      component: Lr
    },
    {
      path: '/lossratio',
      name: 'Test',
      component: Test
    },
    {
      path: '/information/userinfo',
      name: 'UserInfo',
      component: UserInfo
    },
    {
      path: '/membership/qaenrichment',
      name: 'Qaenrichment',
      component: Qaenrichment
    },
    {
      path: '/membership/premiumrescaling',
      name: 'Premiumrescaling',
      component: Premiumrescaling
    },
    {
      path: '/claims/claimsqaenrichment',
      name: 'Claimsqaenrichment',
      component: Claimsqaenrichment
    },
    {
      path: '/claims/claimsrescaling',
      name: 'Claimsrescaling',
      component: Claimsrescaling
    },
    {
      path: '/claims/iptermination',
      name: 'Iptermination',
      component: Iptermination
    },
    {
      path: '/claims/ipdlr',
      name: 'Ipdlr',
      component: Ipdlr
    },
    {
      path: '/claims/ibnr',
      name: 'Ibnr',
      component: Ibnr
    },
    {
      path: '/notfound',
      name: 'Notfound',
      compoment: Notfound
    },
    {
      path: '*',
      name: 'All',
      component: Notfound
    }
  ],

  AuthFilter:async (to, from, next) => {
    store.dispatch('auth/updateTokenInfo')
      .then(() => {
        let tokenInfo = store.getters['auth/tokenInfo']
        //console.log(tokenInfo);
        if (!!tokenInfo.code) {
          if (to.name.startsWith('secure')) {
            next('/')
          } else {
            next()
          }
        } else {
          next()
        }
      })
      .catch(err => {
        if (to.name.startsWith('secure')) {
          next('/')
        } else {
          next()
        }
      })
  }
})


store
auth
index.js
import Vue from 'vue'
import Router from 'vue-router'
import vueResource from 'vue-resource'
import axios from 'axios'
import Vuex from 'vuex'
import Home from '@/components/page/Home'
import Notfound from '@/components/page/Notfound'
import Lr from '@/components/lossratio/Lr'
import Test from '@/components/lossratio/Test'
import Qaenrichment from '@/components/member/Qaenrichment'
import Premiumrescaling from '@/components/member/Premiumrescaling'
import Claimsqaenrichment from '@/components/claims/Claimsqaenrichment'
import Claimsrescaling from '@/components/claims/Claimsrescaling'
import Iptermination from '@/components/claims/Iptermination'
import Ipdlr from '@/components/claims/Ipdlr'
import Ibnr from '@/components/claims/Ibnr'
import UserInfo from '@/components/information/UserInfo'

Vue.use(Router)
Vue.use(vueResource)
Vue.use(Vuex)
window.axios = axios

export default new Router({
  mode: 'history',
  routes: [
    {
      path: '/',
      name: 'Home',
      component: Home
    },
    {
      path: '/lossratio',
      name: 'Lr',
      component: Lr
    },
    {
      path: '/lossratio',
      name: 'Test',
      component: Test
    },
    {
      path: '/information/userinfo',
      name: 'UserInfo',
      component: UserInfo
    },
    {
      path: '/membership/qaenrichment',
      name: 'Qaenrichment',
      component: Qaenrichment
    },
    {
      path: '/membership/premiumrescaling',
      name: 'Premiumrescaling',
      component: Premiumrescaling
    },
    {
      path: '/claims/claimsqaenrichment',
      name: 'Claimsqaenrichment',
      component: Claimsqaenrichment
    },
    {
      path: '/claims/claimsrescaling',
      name: 'Claimsrescaling',
      component: Claimsrescaling
    },
    {
      path: '/claims/iptermination',
      name: 'Iptermination',
      component: Iptermination
    },
    {
      path: '/claims/ipdlr',
      name: 'Ipdlr',
      component: Ipdlr
    },
    {
      path: '/claims/ibnr',
      name: 'Ibnr',
      component: Ibnr
    },
    {
      path: '/notfound',
      name: 'Notfound',
      compoment: Notfound
    },
    {
      path: '*',
      name: 'All',
      component: Notfound
    }
  ],

  AuthFilter:async (to, from, next) => {
    store.dispatch('auth/updateTokenInfo')
      .then(() => {
        let tokenInfo = store.getters['auth/tokenInfo']
        //console.log(tokenInfo);
        if (!!tokenInfo.code) {
          if (to.name.startsWith('secure')) {
            next('/')
          } else {
            next()
          }
        } else {
          next()
        }
      })
      .catch(err => {
        if (to.name.startsWith('secure')) {
          next('/')
        } else {
          next()
        }
      })
  }
})


claims
actions.js
export const cdf = ({commit, state, rootState}) => {
    const instance = axios.create({
      baseURL: state.http.baseUrlLink,
      Authorization: rootState.auth.tokenInfo.token,
    })
    instance.get('/v1/json?type=cdf', { headers: { Authorization: rootState.auth.tokenInfo.token } })
    .then(res => {
        commit('cdf', res.data);
    })
    .catch(err => {
        console.log(err)
    })
}

export const cdfNew = ({state, commit, rootState}) => {
    const instance = axios.create({
      baseURL: state.http.baseUrlLink,
      Authorization: rootState.auth.tokenInfo.token,
    })
    instance.get('/v1/cdf?cover_val='+state.selectCovertype+'&start_date='+state.startDate+'&valuation_date='+state.valDate+'&event_freq='+state.selectEvent, { headers: { Authorization: rootState.auth.tokenInfo.token } })
    .then(res => {
        //console.log(rootState.auth.tokenInfo.token)
        commit('updatedEvent', state.selectEvent);
        commit('cdfNew', res.data);
    })
    .catch(err => {
        console.log(err)
    })
}

export const avgClaims = ({state, commit, rootState}) => {
    const instance = axios.create({
        baseURL: state.http.baseUrlLink,
        Authorization: rootState.auth.tokenInfo.token,
      })
      instance.get('/v1/avg-claims?cover_val='+state.selectCovertypeAvgClaims+'&start_date='+state.startDateAvgClaims+'&valuation_date='+state.valDateAvgClaims+'&event_freq='+state.selectEventAvgClaims, { headers: { Authorization: rootState.auth.tokenInfo.token } })
      .then(res => {
        //console.log(rootState.auth.tokenInfo.token)
        commit('updatedEventAvgClaims', state.selectEventAvgClaims);
        commit('avgClaims', res.data);
      })
      .catch(err => {
          console.log(err)
    })
}

export const devFactors = ({getters}) => {
    let devFactors = getters.updatedDevFactors
}

export const avgClaimsExt = ({getters}) => {
    let avgClaimsExt = getters.updatedAvgClaimsExt
}

export const calcLossRatio = ({state, commit, getters, rootState}) => {
    commit('updateLoadingLoss', true)
    let devFactors = getters.updatedDevFactors
    let avgClaimsExt = getters.updatedAvgClaimsExt
    let config = { headers: { Authorization: rootState.auth.tokenInfo.token, 'Content-Type': 'application/json' }}
    let data = {
        cover_val: state.selectCovertype,
        start_date: state.startDate,
        valuation_date: state.valDate,
        event_freq: state.selectEvent,
        dev_factor : devFactors,
        avg_claims: avgClaimsExt
    }
    //console.log(data)
    const instance = axios.create({
      baseURL: state.http.baseUrlLink,
      Authorization: rootState.auth.tokenInfo.token,
    })
    instance.post('/v1/claims', data, config)
    .then(res => {
        commit('updatedCovertype', state.selectCovertype);
        commit('updatedEvent', state.selectEvent);
        commit('updatedStartDate', state.startDate);
        commit('updatedValDate', state.valDate);
        commit('updatedMethod', state.selectMethod);
        commit('updatedCoverage', state.selectCoverage);
        commit('calcLossRatio', res.data);
        commit('updateLoadingLoss', false);
        //console.log(res.data);
    })
    .catch(err => {
        commit('updateLoadingLoss', true)
        //console.log("Please Try Again");
    })
}

getters.js
export const cdf = (state) => {
    return state.cdf
}

export const cdfNew = (state) => {
    return selectedFactor => {
        return state.cdfNew.filter(x => x.coverage === selectedFactor)
    }
}

export const loadingCdf = (state) => {
    return state.loadingCdf
}

export const updatedCovertype = (state) => {
    return state.selectCovertype
}

export const updatedEvent = (state) => {
    return state.selectEvent
}

export const updatedStartDate = (state) => {
    return state.startDate
}

export const updatedValDate = (state) => {
    return state.valDate
}

export const avgClaims = (state) => {
    return selectedFactor => {
        return state.avgClaims.filter(x => x.approach === selectedFactor)
    }
}

export const updatedCovertypeAvgClaims = (state) => {
    return state.selectCovertypeAvgClaims
}

export const updatedEventAvgClaims = (state) => {
    return state.selectEventAvgClaims
}

export const updatedStartDateAvgClaims = (state) => {
    return state.startDateAvgClaims
}

export const updatedValDateAvgClaims = (state) => {
    return state.valDateAvgClaims
}

export const updatedDevFactors = (state) => {
    return state.devFactors
}

export const updatedAvgClaimsExt = (state) => {
    return state.avgClaimsExt
}

export const calcLossRatio = (state) => {
    return state.calcLossRatio
}

export const loadingLoss = (state) => {
    return state.loadingLoss
}

export const updatedMethod = (state) => {
    return state.selectMethod
}

export const updatedCoverage = (state) => {
    return state.selectCoverage
}

export const http = (state) => {
    return state.http
}

index.js
import state from './state'
import * as getters from './getters'
import * as mutations from './mutations'
import * as actions from './actions'

export default {
  namespaced: true,
  state,
  getters,
  mutations,
  actions
}

mutations.js
export const cdf = (state, cdf) => {
    state.cdf = cdf;
}

export const cdfNew = (state, cdfNew) => {
    state.cdfNew = cdfNew;
}

export const updatedCovertype = (state, payload) => {
    state.selectCovertype = payload
}

export const updatedEvent = (state, payload) => {
    state.selectEvent = payload
}

export const updatedStartDate = (state, payload) => {
    state.startDate = payload
}

export const updatedValDate = (state, payload) => {
    state.valDate = payload
}

export const avgClaims = (state, avgClaims) => {
    state.avgClaims = avgClaims;
}

export const updatedCovertypeAvgClaims = (state, payload) => {
    state.selectCovertypeAvgClaims = payload
}

export const updatedEventAvgClaims = (state, payload) => {
    state.selectEventAvgClaims = payload
}

export const updatedStartDateAvgClaims = (state, payload) => {
    state.startDateAvgClaims = payload
}

export const updatedValDateAvgClaims = (state, payload) => {
    state.valDateAvgClaims = payload
}

export const updatedDevFactors = (state, payload) => {
    state.devFactors = payload
}

export const updatedAvgClaimsExt = (state, payload) => {
    state.avgClaimsExt = payload
}

export const calcLossRatio = (state, calcLossRatio) => {
    state.calcLossRatio = calcLossRatio;
}

export const updateLoadingLoss = (state, payload) => {
    state.loadingLoss = payload
}

export const updatedMethod = (state, payload) => {
    state.selectMethod = payload
}

export const updatedCoverage = (state, payload) => {
    state.selectCoverage = payload
}

state.js
import http from '@/lib/http'

export default {
    cdf: [],
    cdfNew: [],
    loadingCdf: false,
    selectCovertype: 'Not Selected',
    selectEvent: 'Not Selected',
    startDate: 'Not Selected',
    valDate: 'Not Selected',
    avgClaims: [],
    selectCovertypeAvgClaims: 'Not Selected',
    selectEventAvgClaims: 'Not Selected',
    startDateAvgClaims: 'Not Selected',
    valDateAvgClaims: 'Not Selected',
    devFactors: [],
    calcLossRatio: [],
    loadingLoss: false,
    selectMethod: 'Not Selected',
    selectCoverage: 'Not Selected',
    avgClaimsExt: [],
    http: http
}

information
actions.js
export const fetchInfo = ({commit, state, rootState}) => {
    const instance = axios.create({
      baseURL: state.http.baseUrlLink,
      Authorization: rootState.auth.tokenInfo.token,
    })
    instance.get('/v1/info', { headers: { Authorization: rootState.auth.tokenInfo.token } })
    .then(res => {
        commit('fetchInfo', res.data)
    })
    .catch(err => {
        console.log(err)
    })
}

getters.js
export const info = (state) => {
      return state.info
}

export const http = (state) => {
      return state.http
}

index.js
import state from './state'
import * as getters from './getters'
import * as mutations from './mutations'
import * as actions from './actions'

export default {
  namespaced: true,
  state,
  getters,
  mutations,
  actions
}

mutations.js
export const fetchInfo = (state, info) => {
    state.info = info;
}

state.js
import http from '@/lib/http'

export default {
    info: [],
    http: http
}

membership
actions.js
export const fetchPremiumNew = ({commit, state, rootState}) => {
    const instance = axios.create({
      baseURL: state.http.baseUrlLink,
      Authorization: rootState.auth.tokenInfo.token,
    })
    instance.get('/v1/premium?cover_val='+state.selectCovertype+'&start_date='+state.startDate+'&valuation_date='+state.valDate+'&event_freq='+state.selectEvent, { headers: { Authorization: rootState.auth.tokenInfo.token } })
    .then(res => {
        //console.log(rootState.auth.tokenInfo.token)
        commit('updateLoadingPremium', false)
        commit('updatedEvent', state.selectEvent);
        commit('fetchPremiumNew', res.data)
    })
    .catch(err => {
        console.log(err)
    })
}

getters.js
export const loadingPremium = (state) => {
    return state.loadingPremium
}

export const updatedCovertype = (state) => {
    return state.selectCovertype
}

export const premiumNew = (state) => {
    return state.premiumNew
}

export const updatedEvent = (state) => {
    return state.selectEvent
}

export const updatedStarDate = (state) => {
    return state.startDate
}

export const updatedValDate = (state) => {
    return state.valDate
}

export const http = (state) => {
    return state.http
}

index.js
import state from './state'
import * as getters from './getters'
import * as mutations from './mutations'
import * as actions from './actions'

export default {
  namespaced: true,
  state,
  getters,
  mutations,
  actions
}

mutations.js
export const updateLoadingPremium = (state, payload) => {
    state.loadingPremium = payload
}

export const updatedCovertype = (state, payload) => {
    state.selectCovertype = payload
}

export const updatedEvent = (state, payload) => {
    state.selectEvent = payload
}

export const updatedStartDate = (state, payload) => {
    state.startDate = payload
}

export const updatedValDate = (state, payload) => {
    state.valDate = payload
}

export const fetchPremiumNew = (state, premiumNew) => {
    state.premiumNew = premiumNew;
}

state.js
import { getTokenInfo } from '@/lib/adalUtils'
import http from '@/lib/http'

export default {
    loadingPremium: false,
    premiumNew: [],
    selectCovertype: 'Not Selected',
    selectEvent: 'Not Selected',
    startDate: 'Not Selected',
    valDate: 'Not Selected',
    http: http
}

index.js
import Vue from 'vue'
import Vuex from 'vuex'
import auth from './auth'
import membership from './membership'
import claims from './claims'
import information from './information'

Vue.use(Vuex)

const store = new Vuex.Store({
    modules: {
      membership,
      auth,
      claims,
      information
    },

    state: {},

    getters: {},

    mutations: {},
    
    actions: {}
})

export default store

App.vue
<template>
  <v-app dark>
    <v-navigation-drawer id="crd"
      persistent
      :mini-variant="miniVariant"
      :clipped="clipped"
      v-model="drawer"
      enable-resize-watcher
      fixed
      app
      stateless
      value="true"
    >
      <v-toolbar flat color="light-green">
      <v-list>
        <v-list-tile>
          <v-list-tile-title class="title">
            COLOMBUS
          </v-list-tile-title>
        </v-list-tile>
      </v-list>
    </v-toolbar>

    <v-divider></v-divider>

    <v-list dense class="pt-0" id="crd">


        <v-list-group
          prepend-icon="expand_more"
          no-action
          sub-group
          v-if="$adal.isAuthenticated()"
        >

        <v-list-tile slot="activator">
            <v-list-tile-title>Information</v-list-tile-title>
            <v-icon color="light-green">assessment</v-icon>
          </v-list-tile>

          <v-list-tile
            v-for="(input, i) in inputs"
            :key="i"
            :to=input[1]
            @click="checkClick"
            exact
          >

            <v-list-tile-title v-text="input[0]"></v-list-tile-title>
          </v-list-tile>
        </v-list-group>
        

        <v-list-group
          prepend-icon="expand_more"
          no-action
          sub-group
          v-if="$adal.isAuthenticated()"
        >

        <v-list-tile slot="activator">
            <v-list-tile-title>Membership</v-list-tile-title>
            <v-icon color="orange darken-2">accessibility</v-icon>
          </v-list-tile>

        <v-list-tile
            v-for="(membership, i) in memberships"
            :key="i"
            :to=membership[1]
            @click="checkClick"
            exact
          >

            <v-list-tile-title>
              {{ membership[0] }}              
            </v-list-tile-title>
          </v-list-tile>
        </v-list-group>

          <v-list-group
          prepend-icon="expand_more"
          no-action
          sub-group
          v-if="$adal.isAuthenticated()"
        >

          <v-list-tile slot="activator">
            <v-list-tile-title>Claims</v-list-tile-title>
            <v-icon color="teal accent-4">timeline</v-icon>
          </v-list-tile>

        <v-list-tile
            v-for="(claim, i) in claims"
            :key="i"
            :to=claim[1]
            @click="checkClick"
            exact
          >
            <v-list-tile-title v-text="claim[0]"></v-list-tile-title>
          </v-list-tile>
        </v-list-group>

        <v-list-group
          prepend-icon="expand_more"
          no-action
          sub-group
          v-if="$adal.isAuthenticated()"
        >

          <v-list-tile slot="activator">
            <v-list-tile-title>Loss Ratio</v-list-tile-title>
            <v-icon color="light-green">trending_down</v-icon>
          </v-list-tile>

        <v-list-tile
          v-for="(lossratio, i) in lossratios"
          :key="i"
          :to="lossratio[1]"
          @click="checkClick"
          exact
        >

        <v-list-tile-title v-text="lossratio[0]"></v-list-tile-title>
          </v-list-tile>
        </v-list-group>

        <v-list-group
          prepend-icon="expand_more"
          no-action
          sub-group
        >

        <v-list-tile slot="activator">
            <v-list-tile-title>Authentication</v-list-tile-title>
            <v-icon color="orange darken-2">perm_identity</v-icon>
        </v-list-tile>

        <v-list-tile exact @click="signIn" v-if="!$adal.isAuthenticated()">
          <v-list-tile-title>Sign In</v-list-tile-title>
        </v-list-tile>

        <v-list-tile exact @click="signOut" v-else>
          <v-list-tile-title>Logout</v-list-tile-title>
        </v-list-tile>

        </v-list-group>

      </v-list>
    </v-navigation-drawer>

    <v-toolbar
      app
      :clipped-left="clipped"
    >

      <v-toolbar-side-icon id="crd" color="light-green" @click.stop="drawer = !drawer"></v-toolbar-side-icon>

    <v-spacer></v-spacer>

      <v-avatar 
      size="60px" 
      radius="10px"
      :tile="tile"
      >
        <img src="@/assets/Green TAL logo.png">
		  </v-avatar>

		<v-spacer></v-spacer>

      <v-toolbar-title v-text="title"></v-toolbar-title>

		<v-spacer></v-spacer>

      <v-btn large flat exact v-bind:to="'/'" id="crd">
          <v-icon color="light-green">account_balance</v-icon>
      </v-btn>

      <v-spacer></v-spacer>
      </v-toolbar>

      <v-content>
      <router-view></router-view>
      </v-content>

      <v-footer
    dark
    height="auto"
  >
    <v-card
      class="flex"
      flat
      tile
    >
      <v-card-title class="light-green">
        <strong class="subheading">Redirect to Columbus homepage</strong>

        <v-spacer></v-spacer>

        <v-btn icon @click.stop="clipped = !clipped" id="crd">
        <router-link class="cstm" to="/"><v-icon>account_balance</v-icon></router-link>
        </v-btn>

      </v-card-title>
      <v-card-actions class="grey darken-4 justify-center">
        &copy;{{ new Date().getFullYear() }} — <strong>Copyright</strong>
      </v-card-actions>
    </v-card>
  </v-footer>
  </v-app>
</template>

<script>

export default {
  data () {
    return {
	    tile: true,
      clipped: false,
      drawer: true,
      fixed: false,
      miniVariant: false,
      right: true,
      rightDrawer: false,
      tab: null,
      title: 'COLUMBUS',

      inputs: [
        ['User Input','/information/userinfo']
      ],
      memberships: [
        ['QA & Enrichment','/membership/qaenrichment'],
        ['Premium Rescaling','/membership/premiumrescaling', 'build']
      ],
      claims: [
        ['QA & Enrichment','/claims/claimsqaenrichment'],
        ['Claims Rescaling','/claims/claimsrescaling'],
        ['IP Termination','/claims/iptermination'],
        ['IPDLR','/claims/ipdlr'],
        ['IBNR','/claims/ibnr']
      ],
      lossratios: [
        ['Loss Ratio Result', '/lossratio']
      ]
    }
  },
  name: 'App',

  computed: {
    user () {
      return this.$store.getters['auth/user']
    }
  },

  methods: {
    checkClick() {
      //console.log("Clicked");
    },

    signIn () {
      this.$session.start();
      this.$adal.login();
      },

    signOut () {
      if (this.$session.exists()) {
        //console.log(this.$session);
        //this.$session.destroy()
        this.$adal.logout();
        this.$router.push('/');
      }
      }
    },

  created: function(){
    this.checkClick();
    let user = this.$adal.user ? this.$adal.user : undefined
    this.$store.commit('auth/updateUser', user)
  }
}
</script>

<style scoped>
  .cstm{
    color: white;
  }

  img{
  -webkit-border-radius: 0px;
    -moz-border-radius: 0px;
    border-radius: 0px;
    border: none;
    height: 25px;
    width: 65px;
}

#crd{
  -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    border: none;
}
</style>

main.js
import Vue from 'vue'
import App from './App'
import store from './store/index'
import router from './router'
import Vuetify from 'vuetify'
import 'vuetify/dist/vuetify.min.css'
import HighchartsVue from 'highcharts-vue'
import axios from 'axios'
import Vuex from 'vuex'
import Adal from 'vue-adal'
import VueSession from 'vue-session'

import Highcharts from 'highcharts'
import qs from 'qs'
import heatmap from 'highcharts/modules/heatmap'
import exportingInit from 'highcharts/modules/exporting'
import JsonExcel from 'vue-json-excel'
Vue.component('downloadExcel', JsonExcel)

exportingInit(Highcharts)
heatmap(Highcharts)
Vue.use(HighchartsVue)
Vue.use(VueSession)
//Vue.use(VueSession, options)

var jsPDF = require('jspdf');
require('jspdf-autotable');

Vue.use(Vuetify)
Vue.use(Vuex)
Vue.use(qs)
window.axios = axios

var VueCookie = require('vue-cookie');
Vue.use(VueCookie);

Vue.use(Adal, {
  config: {
    tenant: 'fedfd771-b82e-47b1-a705-959f02fe7ded', // 'common' (multi-tenant gateway) or Azure AD Tenant ID    
    clientId: '2245d8d3-c60d-41d4-988f-712d706aeda1', // Application ID
    redirectUri: 'http://localhost:8080', // dev Host URI
    cacheLocation: 'localStorage'
  },  
    requireAuthOnInitialize: false, // Set this to true for authentication on startup  
    router: router // Pass a vue-router object in to add route hooks with authentication and role checking
})

Vue.config.productionTip = false

new Vue({
  el: '#app',
  router,
  store,
  components: { App },
  template: '<App/>'
})

    
    
