1. index.html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="HandheldFriendly" content="true">
    <link href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons' rel="stylesheet">
    <title>Interaction</title>
  </head>
  <body>
    <div id="app"></div>
  </body>
</html>

<style scoped>
  html {
    -webkit-text-size-adjust: none
  }
</style>

2. src: components
   A. page
   NotFound.vue
   <template>
    <div class="text-xs-center mt-5">Session Lost</div>
</template>

<script>
export default {
    
}
</script>

B.tal 
Tal.vue
<template>
    <v-container fluid class="pa-1">
        <app-header class="mt-3 mb-3"/>
        <v-layout column id="content">
            <v-layout v-bind="layoutAttributes">
                <app-sidebar class="elevation-8"/>
                <div v-if="showed"><app-content-notapple class="elevation-8" /></div>
                <div v-else-if="!showed && isPercentageY"><app-content-notapple-two class="elevation-8" /></div>
                <div v-else-if="!showed && isPercentageN"><app-content-notapple-three class="elevation-8" /></div>
            </v-layout>
            <div class="text-xs-center">
                    <v-btn color="black" :disabled="isPercentageY == false" v-on:click="playtwo" small dark id="crd">
                        <v-icon dark color="pink" v-if="showIcon">how_to_reg</v-icon>
                        <h3 style="color:#B30057" v-else>Yes</h3>
                    </v-btn>
                    
                    <v-btn color="black" :disabled="isPercentageN == false" v-on:click="playthree" small dark id="crd">
                        <v-icon dark color="pink" v-if="showIcon">notification_important</v-icon>
                        <h3 style="color:#B30057" v-else>No</h3>
                    </v-btn>
                </div>
        </v-layout>
        <app-footer class="mt-3"/>
    </v-container>
</template>

<script>
import Header from './Header'
import Footer from './Footer'
import Sidebar from './Sidebar'
import ContentNotapple from './ContentNotapple'
import ContentNotappleTwo from './ContentNotappleTwo'
import ContentNotappleThree from './ContentNotappleThree'

export default {
    data() {
        return {
                showed: true,
                showIcon: true
            }
    },

    computed: {
        windowSize () {
            return this.$store.getters['video/windowSize']
        },
        selectPercentage () {
            return this.$store.getters['tal/selectPercentage']
        },
        isPercentageSelected () {
            return this.$store.getters['tal/isPercentageSelected']
        },
        selectY () {
            return this.$store.getters['tal/selectY']
        },
        isPercentageY () {
            return this.$store.getters['tal/isPercentageY']
        },
        selectN () {
            return this.$store.getters['tal/selectN']
        },
        isPercentageN () {
            return this.$store.getters['tal/isPercentageN']
        },
        layoutAttributes () {
            return this.$store.getters['video/layoutAttributes'](this.windowSize.width)
        }
    },

    watch: {
        windowSize () {
            this.$vuetify.goTo('#content', { duration: 500, offset: -5 })
        }
    },

    methods: {
        playthree(){
            this.showed = false;
        },
        playtwo(){
            this.showed = false;
        },
        detectBrowser(){
            this.result = navigator.userAgent;
            if(navigator.userAgent.indexOf("Firefox") !=-1){
                this.showIcon = false;
            }
        }
    },

    mounted(){
        this.detectBrowser()
    },

    components: {
        appHeader: Header,
        appFooter: Footer,
        appSidebar: Sidebar,
        appContentNotapple: ContentNotapple,
        appContentNotappleTwo: ContentNotappleTwo,
        appContentNotappleThree: ContentNotappleThree
    }
}
</script>

2. Sidebar.vue
<template>
    <div :style="sideBarStyl">
        <v-layout v-bind="sideLayoutAttributes">
            <div
                v-for="(icon, i) in icons"
                :key="i"
                :style="itemStyl"
                v-ripple
                @click="onClick(i)"
            >
                <v-layout align-center justify-center column fill-height>
                    <v-icon size="30" color="pink" v-if="showIcon">{{ icon.name }}</v-icon>
                    <v-avatar 
                        size="60px"
                        radius="10px"
                        :tile="tile"
                        v-else
                        >
                            <img src="@/assets/fsslogo.png" id="logosidebar">
                    </v-avatar>
                    <span class="body-2 purple--text">{{ icon.label }}</span>
                </v-layout>
            </div>
            
            <div :style="leftOverStyl" v-ripple @click="onClick()">
                <v-layout align-center justify-center column fill-height>
                    <v-avatar 
                        size="60px" 
                        radius="10px"
                        :tile="tile"
                        >
                            <img src="@/assets/fsslogo.png" id="logosidebar">
                    </v-avatar>
                </v-layout>
            </div>
        </v-layout>
    </div>
</template>

<script>
export default {
    data () {
        return {
            icons: [
                { label: 'Member', name: 'accessibility'},
                { label: 'Employer', name: 'supervisor_account'},
                { label: 'Insurance', name: 'account_balance'}
            ],
            sideBorderStyl: { border: '1px solid #FFFFFF' },
            tile: true,
            showIcon: true
        }
    },
    computed: {
        windowSize () {
            return this.$store.getters['video/windowSize']
        },
        layoutAttributes () {
            return this.$store.getters['video/layoutAttributes'](this.windowSize.width)
        },
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },        
        contentSize () {
            return this.$store.getters['video/contentSize'](this.windowSize.width, this.windowSize.height)
        },
        sideLayoutAttributes () {
            return this.$store.getters['video/sideLayoutAttributes'](this.layoutAttributes)
        },
        sideBarStyl () {
            return Object.assign(
                this.$store.getters['video/sideBarStyl'](this.layoutAttributes, this.contentSize, this.sizeParams),
                this.sideBorderStyl,
                { 'background-color': '#000000' }
            )
        },
        itemStyl () {
            return Object.assign(
                this.$store.getters['video/sideItemStyl'](this.sizeParams), this.sideBorderStyl
            )
        },
        leftOverStyl () {
            return Object.assign(
                this.$store.getters['video/sideLeftOverStyl'](this.layoutAttributes, this.contentSize, this.sizeParams, this.icons.length),
                this.sideBorderStyl
            )
        }
    },
    methods: {
        onClick (i=null) {
            //console.log('click-' + i)
            if(i==0){
                var win = window.open('https://firststatesuper.com.au/member', '_blank');
                win.focus();
            } else if(i==1){
                var win = window.open('https://firststatesuper.com.au/employer', '_blank');
                win.focus();
            } else if(i==2){
                var win = window.open('https://firststatesuper.com.au/investment-and-performance', '_blank');
                win.focus();
            } else if(i==null){
                var win = window.open('https://firststatesuper.com.au/about', '_blank');
                win.focus();
            }
        },

        //browser detect
        detectBrowser(){
            this.result = navigator.userAgent;
            if(navigator.userAgent.indexOf("Firefox") !=-1){
                this.showIcon = false;
            }
        }
    },

    mounted() {
        this.detectBrowser()
    }
}
</script>

3. Header.vue
<template>
        <div class="stretch">
            <v-toolbar color="white" id="crd">
            <v-spacer></v-spacer>
            <v-avatar 
            size="60px" 
            radius="10px"
            :tile="tile"
            >
            <img src="@/assets/fsslogo.png" id="logo">
            </v-avatar>
            <v-toolbar-title v-text="title"></v-toolbar-title>
            <v-spacer></v-spacer>
      </v-toolbar>
    </div>
</template>

<script>
export default {
  data () {
    return {
        tile: true,
        title: 'INTERACTIVE VIDEO'
    }
  },
}
</script>

<style scoped>
.stretch {
    font-size: 0.85em;
    border-radius: 10px;
    color: black;
}
</style>

4. Footer.vue
<template>
        <v-footer
            color="white"
            class="white"
            height="auto"
        >
            <v-card
            class="flex"
            flat
            tile
            id="crd"
            >
            <v-spacer></v-spacer>

            <v-card-actions class="white justify-center">
                &copy; Copyright {{ new Date().getFullYear() }}&nbsp;
                <v-avatar
                size="30px" 
                radius="10px"
                :tile="tile"
                >
                <img src="@/assets/Green TAL logo.png" id="logotalnew">
                </v-avatar>
                <v-spacer></v-spacer>

                Powered by&nbsp;
                <v-avatar
                size="30px" 
                radius="10px"
                :tile="tile"
                >
                <img src="@/assets/Green TAL logo.png" id="logotalme">
                </v-avatar>
                 /ME Interactive Video

                <v-spacer></v-spacer>
                Help | Privacy Policy
            </v-card-actions>

            <v-spacer></v-spacer>
            </v-card>
  </v-footer>
</template>

<script>
export default {
  data () {
    return {
        tile: true,
        title: 'INTERACTIVE VIDEO'
    }
  }
}
</script>

<style scoped>
.white {
    font-size: 0.9em;
    border-radius: 10px;
    color: black;
}
</style>

5. custom-theme.css
#logofinishing{
  -webkit-border-radius: 0px;
    -moz-border-radius: 0px;
    border-radius: 0px;
    border: none;
    height: 25px;
    width: 65px;
}

#logosidebar {
  -webkit-border-radius: 0px;
    -moz-border-radius: 0px;
    border-radius: 0px;
    border: none;
    height: 30px;
    width: 60px;
}

#logofooter {
  -webkit-border-radius: 0px;
    -moz-border-radius: 0px;
    border-radius: 0px;
    border: none;
    height: 30px;
    width: 60px;
}

#logotalme {
  -webkit-border-radius: 0px;
  -moz-border-radius: 0px;
  border-radius: 0px;
  border: none;
  height: 10px;
  width: 30px;
}

#logotalnew {
  -webkit-border-radius: 0px;
  -moz-border-radius: 0px;
  border-radius: 0px;
  border: none;
  height: 10px;
  width: 30px;
}

.stretch {
  width: 100%;
  background-color: #FFFFFF;
}

.center {
  display: table;
  margin: 0 auto;
  width: 200px;
  background-color: #ECEFF1;
}

#logo{
  -webkit-border-radius: 0px;
    -moz-border-radius: 0px;
    border-radius: 0px;
    border: none;
    height: 30px;
    width: 65px;
}

#crd {
    -webkit-border-radius: 10px;
      -moz-border-radius: 10px;
      border-radius: 10px;
      border: 0px;
      font-weight: bold;
      color: black;
}

#btns {
    height: 100%;
    z-index: 1000;
}

.vjs-tech {
    background-color: white;
 }

.vjs-custom-skin > .video-js .vjs-menu-button-inline.vjs-slider-active,.vjs-custom-skin > .video-js .vjs-menu-button-inline:focus,.vjs-custom-skin > .video-js .vjs-menu-button-inline:hover,.video-js.vjs-no-flex .vjs-menu-button-inline {
  width: 10em;
}

.vjs-custom-skin > .video-js .vjs-controls-disabled .vjs-big-play-button {
  display: none!important;
}

.vjs-custom-skin > .video-js .vjs-control {
  width: 3em
}

.vjs-custom-skin > .video-js .vjs-control.vjs-live-control{
  width: auto;
  padding-left: .5em;
  letter-spacing: .1em;
}

.vjs-custom-skin > .video-js .vjs-menu-button-inline:before {
  width: 1.5em
}

.vjs-menu-button-inline .vjs-menu {
  left: 3em
}

.vjs-paused.vjs-has-started.vjs-custom-skin > .video-js .vjs-big-play-button,.video-js.vjs-ended .vjs-big-play-button,.video-js.vjs-paused .vjs-big-play-button {
  display: block
}

.vjs-custom-skin > .video-js .vjs-load-progress div,.vjs-seeking .vjs-big-play-button,.vjs-waiting .vjs-big-play-button {
  display: none!important
}

.vjs-custom-skin > .video-js .vjs-mouse-display:after,.vjs-custom-skin > .video-js .vjs-play-progress:after {
  padding: 0 .4em .3em
}

.video-js.vjs-ended .vjs-loading-spinner {
  display: none;
}

.video-js.vjs-ended .vjs-big-play-button {
  display: block !important;
}

.video-js.vjs-ended .vjs-big-play-button,.video-js.vjs-paused .vjs-big-play-button,.vjs-paused.vjs-has-started.vjs-custom-skin > .video-js .vjs-big-play-button {
  display: block
}

.vjs-custom-skin > .video-js .vjs-big-play-button {
  top: 50%;
  left: 50%;
  margin-left: -1.5em;
  margin-top: -1em
}

.vjs-custom-skin > .video-js .vjs-big-play-button {
  background-color: rgba(0,0,0,0.45);
  font-size: 3.5em;
  /* border-radius: 50%; */
  height: 2em !important;
  line-height: 2em !important;
  margin-top: -1em !important
}

.video-js:hover .vjs-big-play-button,.vjs-custom-skin > .video-js .vjs-big-play-button:focus,.vjs-custom-skin > .video-js .vjs-big-play-button:active {
  background-color: #7B1FA2
}

.vjs-custom-skin > .video-js .vjs-loading-spinner {
  border-color: #7B1FA2
}

.vjs-custom-skin > .video-js .vjs-control-bar2 {
  background-color: #FFFFFF
}

.vjs-custom-skin > .video-js .vjs-control-bar {
   /*background-color: rgba(0,0,0,0.3) !important;*/
  color: #E91E63;
  font-size: 14px
}

.vjs-custom-skin > .video-js .vjs-play-progress,.vjs-custom-skin > .video-js  .vjs-volume-level {
  background-color: #263238
}

.vjs-custom-skin > .video-js .vjs-play-progress:before {
  top: -0.3em;
}

.vjs-custom-skin > .video-js .vjs-progress-control:hover .vjs-progress-holder {
  font-size: 1.3em;
}

.vjs-menu-button-popup.vjs-volume-menu-button-vertical .vjs-menu {
  left: 0em;
}

.vjs-custom-skin > .video-js .vjs-menu li {
  padding: 0;
  line-height: 2em;
  font-size: 1.1em;
  font-family: "PingFang SC","Helvetica Neue","Hiragino Sans GB","Segoe UI","Microsoft YaHei","微软雅黑",sans-serif;
}

.vjs-custom-skin > .video-js .vjs-time-tooltip,
.vjs-custom-skin > .video-js .vjs-mouse-display:after, 
.vjs-custom-skin > .video-js .vjs-play-progress:after {
  border-radius: 0;
  font-size: 1em;
  padding: 0;
  width: 3em;
  height: 1.5em;
  line-height: 1.5em;
  top: -3em;
  -webkit-border-radius: 10px;
      -moz-border-radius: 10px;
      border-radius: 10px;
      border: 0px;
      background-color: #7B1FA2;
}

.vjs-custom-skin > .video-js .vjs-menu-button-popup .vjs-menu {
  width: 5em;
  left: -1em;
}

.vjs-custom-skin > .video-js .vjs-menu-button-popup.vjs-volume-menu-button-vertical .vjs-menu {
  left: 0;
}

.vjs-custom-skin > .video-js .vjs-control-bar .vjs-resolution-button .vjs-menu {
   /*order: 4;*/
}

 /*排序顺序*/
.vjs-custom-skin > .video-js .vjs-control-bar .vjs-play-control {
  order: 0;
}

.vjs-custom-skin > .video-js .vjs-control-bar .vjs-time-control {
  min-width: 1em;
  padding: 0;
  margin: 0 .1em;
  text-align: center;
  display: block;
  order: 1;
}

.vjs-custom-skin > .video-js .vjs-control-bar .vjs-playback-rate .vjs-playback-rate-value{
  font-size: 1.2em;
  line-height: 2.4;
}

.vjs-custom-skin > .video-js .vjs-progress-control.vjs-control {
  order: 2;
}

.vjs-custom-skin > .video-js .vjs-control-bar .vjs-volume-menu-button {
  order: 3;
}

.vjs-custom-skin > .video-js .vjs-control-bar .vjs-resolution-button {
  order: 4;
}

.vjs-custom-skin > .video-js .vjs-control-bar .vjs-resolution-button .vjs-resolution-button-label {
  display: block;
  line-height: 3em;
}

.vjs-custom-skin > .video-js .vjs-control-bar .vjs-playback-rate {
  order: 5;
}

.vjs-custom-skin > .video-js .vjs-control-bar .vjs-fullscreen-control {
  /* order: 6; */
  display: none;
}

6. Content.vue
<template>
    <div :style="contentBorderStyl">
        <div :style="outerStyl">
            <video-player 
                class="vjs-custom-skin"
                ref="videoPlayer"
                :options="playerOptions"
                :playsinline="true"
                @play="onPlayerPlay($event)"
                @pause="onPlayerPause($event)"
                @ended="onPlayerEnded($event)"
                @loadeddata="onPlayerLoadeddata($event)"
                @waiting="onPlayerWaiting($event)"
                @playing="onPlayerPlaying($event)"
                @timeupdate="onPlayerTimeupdate($event)"
                @canplay="onPlayerCanplay($event)"
                @canplaythrough="onPlayerCanplaythrough($event)"
                @ready="playerReadied"
                @statechanged="playerStateChanged($event)"
            >
            </video-player>

            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.085, null)" v-if="currentTime > 1 && currentTime < 1.5">
                <app-user-info :currentTime="currentTime" :windowWidth="windowWidth" :contentSize="contentSize"/>
            </div>   
            </transition>

            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.085, null)" v-if="currentTime > 12.7 && currentTime < 18.93">
                <app-welcome :userInfo="userInfo" :windowWidth="windowWidth" :contentSize="contentSize"/>
            </div>   
            </transition>

            <transition name="slide-fade">       
            <div :style="overlayStyl(2000, 0.1, null, 0.055, null)" v-if="currentTime > 19.5 && currentTime < 23.3">
                <app-info :windowWidth="windowWidth" :userInfo="userInfo" :welcome="welcome" :contentSize="contentSize"/>
            </div>
            </transition>

            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.078, null)" v-if="currentTime > 24.8 && currentTime < 29.2">
                <app-warn :windowWidth="windowWidth" :userInfo="userInfo" :welcome="welcome" :info="info" :contentSize="contentSize"/>
            </div>
            </transition>

            <transition name="slide-fade">       
            <div :style="overlayStyl(2000, 0.1, null, 0.048, null)" v-if="currentTime > 30.5 && currentTime < 35.35">
                <app-opt :windowWidth="windowWidth" :userInfo="userInfo" :welcome="welcome" :info="info" :warn="warn" :contentSize="contentSize"/>
            </div>
            </transition>

            <transition name="slide-fade">       
            <div :style="overlayStyl(2000, 0.1, null, 0.08, null)" v-if="currentTime > 35.75 && currentTime < 43.3">
                <app-lose :windowWidth="windowWidth" :userInfo="userInfo" :welcome="welcome" :info="info" :warn="warn" :opt="opt" :contentSize="contentSize"/>
            </div>
            </transition>

            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.028, null)" v-if="currentTime > 46 && currentTime < 53">
                <app-balance-info :windowWidth="windowWidth" :userInfo="userInfo" :welcome="welcome" :info="info" :warn="warn" :opt="opt" :lose="lose" :contentSize="contentSize"/>
            </div>
            </transition>

            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.06, null)" v-if="currentTime > 54 && currentTime < 59">
                <app-options :windowWidth="windowWidth" :userInfo="userInfo" :welcome="welcome" :info="info" :warn="warn" :opt="opt" :lose="lose" :balanceInfo="balanceInfo" :contentSize="contentSize"/>
            </div>
            </transition>

            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.05, null)" v-if="currentTime >= 64 && !isOptionSelected">
                <app-select-option :windowWidth="windowWidth" :userInfo="userInfo" :welcome="welcome" :info="info" :warn="warn" :opt="opt" :lose="lose" :balanceInfo="balanceInfo" :options="options" :contentSize="contentSize"/>
            </div>
            </transition>

            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.045, null)" v-if="currentTime > 73.5 && isOptionSelected && !isTermChecked">
                <app-brief :windowWidth="windowWidth" :userInfo="userInfo" :welcome="welcome" :info="info" :warn="warn" :opt="opt" :lose="lose" :balanceInfo="balanceInfo" :options="options" :selectOption="selectOption" :contentSize="contentSize"/>
            </div>
            </transition>

            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.05, null, 0.025, null)" v-if="currentTime > 81.5 && isTermChecked && isOptionSelected">
                <app-finishing :windowWidth="windowWidth" :userInfo="userInfo" :welcome="welcome" :info="info" :warn="warn" :opt="opt" :lose="lose" :balanceInfo="balanceInfo" :options="options" :selectOption="selectOption" :brief="brief" :contentSize="contentSize"/>
            </div>
            </transition>

            <div :style="overlayStyl(1500, 0, null, 0, null)" v-if="pausePlayed">
                <app-disable-div :contentSize="contentSize"/>
            </div>
        </div>
    </div>
</template>

<script>
import Vue from 'vue'
import './custom-theme.css'
import UserInfo from './interactions/UserInfo'
import Welcome from './interactions/Welcome'
import Info from './interactions/Info'
import Warn from './interactions/Warn'
import Opt from './interactions/Opt'
import Lose from './interactions/Lose'
import BalanceInfo from './interactions/BalanceInfo'
import Options from './interactions/Options'
import SelectOption from './interactions/SelectOption'
import Brief from './interactions/Brief'
import Finishing from './interactions/Finishing'
import DisableDiv from '../video/DisableDiv'

export default {
    data() {
        return {
            windowWidth: 0,
            windowHeight: 0,
            duration: 0,
            currentTime: 0,
            videoStatus: null,
            videoStatusUp: {},
            contentBorderStyl: {},
            username: 'NewUser',
            playerOptions: {
                    autoplay: false,
                    muted: false,
                    language: 'en',
                    controls: true,
                    sources: [{
                    type: "video/mp4",
                    src: "/static/workspace/content/videos/fsspartone-0MnJ3tp12JzE_beta.mp4",
                }],
                poster: "/static/workspace/content/images/fsslogo.png"                
                },
        }
    },
    computed: {
        player() {
            return this.$refs.videoPlayer.player
        },
        userData(){
            return this.$store.getters['tal/userdata'];
        },
        userInfo () {
            return this.$store.getters['tal/userInfo']
        },
        isUserInfoSubmitted () {
            return this.$store.getters['tal/isUserInfoSubmitted']
        },
        isOptionSelected (){
            return this.$store.getters['tal/isOptionSelected']
        },
        isTermChecked (){
            return this.$store.getters['tal/isTermChecked']
        },
        isEditSelected (){
            return this.$store.getters['tal/isEditSelected']
        },
        welcome () {
            return this.$store.getters['tal/welcome']
        },
        info () {
            return this.$store.getters['tal/info']
        },
        warn () {
            return this.$store.getters['tal/warn']
        },
        opt () {
            return this.$store.getters['tal/opt']
        },
        optionnow () {
            return this.$store.getters['tal/optionnow']
        },
        lose () {
            return this.$store.getters['tal/lose']
        },
        balanceInfo () {
            return this.$store.getters['tal/balanceInfo']
        },
        options () {
            return this.$store.getters['tal/options']
        },
        selectOption () {
            return this.$store.getters['tal/selectOption']
        },
        brief () {
            return this.$store.getters['tal/brief']
        },
        pausePlayed () {
            return this.$store.getters['tal/pausePlayed'](this.currentTime, this.isOptionSelected)
        },
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        contentSize () {
            return this.$store.getters['video/contentSize'](this.windowWidth, this.windowHeight)
        },
        overlayStyl () {
            return this.$store.getters['video/overlayStyl'](this.contentSize)
        },
        outerStyl () {
            return this.$store.getters['video/outerStyl'](this.contentSize)
        }
    },
    watch: {
        setOverlayStyl (overlay) {
            return this.overlayStyl(overlay.opacity, overlay.top, overlay.bottom, overlay.left, overlay.right)
        },
        isUserInfoSubmitted () {
            if (this.isUserInfoSubmitted) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                    this.player.play()
                }, 200)
            }
        },
        pausePlayed () {
            if (this.pausePlayed) {
                setTimeout(() => {
                    this.player.pause()
                }, 200)  
            }
        },
        isOptionSelected () {
            if (this.isOptionSelected) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                    this.player.play()
                }, 200)
            }
        },
        isTermChecked () {
            if (this.isTermChecked) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                }, 200)
            }
        },
        isEditSelected () {
            if (this.isEditSelected) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                }, 200)
            }
        }
    },
    methods: {
        getWindowSize () {
            this.windowWidth = document.documentElement.clientWidth
            this.windowHeight = document.documentElement.clientHeight
            this.$store.commit('video/updateWindowSize', { width: this.windowWidth, height: this.windowHeight })
            
            this.player.width(this.contentSize.width)
            this.player.height(this.contentSize.height)
                if (!this.player.paused()) {
                    setTimeout(() => {
                        this.player.muted(false)
                        this.player.currentTime(this.currentTime)
                        this.player.play()
                    }, 200)
                }
            else {
                setTimeout(() => {
                    this.player.pause()
                }, 200)
            }
        },
        onPlayerPlay(player) {
            this.videoStatus = 'play'
        },
        onPlayerPause(player) {
            this.videoStatus = 'paused'
            this.duration = player.duration()
            this.currentTime = player.currentTime()
        },
        onPlayerEnded(player) {
            this.videoStatus = 'ended'
        },
        onPlayerLoadeddata(player) {
        },
        onPlayerWaiting(player) {
            //this.videoStatus = 'waiting'
        },
        onPlayerPlaying(player) {
            this.videoStatus = 'playing'
        },
        onPlayerTimeupdate(player) {
            if (!isNaN(player.duration()) && isFinite(player.duration())) {
                this.duration = player.duration()
                this.currentTime = player.currentTime()
            }
        },
        onPlayerCanplay(player) {
            this.videoStatus = 'canplay'
        },
        onPlayerCanplaythrough(player) {
        },
        playerStateChanged(playerCurrentState) {
            this.videoStatusUp = JSON.stringify(playerCurrentState)
        },
        playerReadied(player) {
        },
        /*updateUserInfo (info) {
            this.$store.commit('tal/updateUserInfo', info)
        },
        name () {
            if(location.href.indexOf("DS00001") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "DS00001"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    //localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("GS00002") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "GS00002"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    //localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("AY00003") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "AY00003"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    //localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("RE00004") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "RE00004"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    //localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("JK00005") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JK00005"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    //localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("JP00006") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JP00006"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    //localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("PK00007") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "PK00007"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    //localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("VS00008") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "VS00008"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    //localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("YT00009") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "YT00009"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    //localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("JC00010") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JC00010"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    //localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("BN00011") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "BN00011"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    //localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("KL00012") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "KL00012"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    //localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else {
                this.$store.commit('tal/updateUserInfo', this.username)
                this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                //localStorage.setItem('name', this.username);
                return this.username;
            }
        },*/
    },
    mounted() {
        this.$nextTick(function() {
            window.addEventListener('resize', this.getWindowSize)
            this.getWindowSize();
            //this.name();
        })
    },
    beforeDestroy() {
        window.removeEventListener('resize', this.getWindowSize)
    },
    created() {
        //this.name();
    },
    components: {
        appUserInfo: UserInfo,
        appWelcome: Welcome,
        appInfo: Info,
        appWarn: Warn,
        appOpt: Opt,
        appLose: Lose,
        appBalanceInfo: BalanceInfo,
        appOptions: Options,
        appSelectOption: SelectOption,
        appBrief: Brief,
        appFinishing: Finishing,
        appDisableDiv: DisableDiv
    }
}
</script>

<style>
.tmp {
    border: 2px solid white;
}

.slide-fade-enter-active {
  transition: all .2s ease;
}

.slide-fade-leave-active {
  transition: all .2s cubic-bezier(1.0, 0.5, 0.8, 1.0);
}

.slide-fade-enter, .slide-fade-leave-to{
  transform: translateX(5px);
  opacity: 0;
}
</style>

7. ContentNotapple.vue
<template>
    <div :style="contentBorderStyl">
        <div :style="outerStyl">
            <video-player 
                class="vjs-custom-skin"
                ref="videoPlayer"
                :options="playerOptions"
                :playsinline="true"
                @play="onPlayerPlay($event)"
                @pause="onPlayerPause($event)"
                @ended="onPlayerEnded($event)"
                @loadeddata="onPlayerLoadeddata($event)"
                @waiting="onPlayerWaiting($event)"
                @playing="onPlayerPlaying($event)"
                @timeupdate="onPlayerTimeupdate($event)"
                @canplay="onPlayerCanplay($event)"
                @canplaythrough="onPlayerCanplaythrough($event)"
                @ready="playerReadied"
                @statechanged="playerStateChanged($event)"
            >
            </video-player>
            
            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.05, null)" v-if="currentTime >= 89  && !isOptionSelected">
                <app-select-option :windowWidth="windowWidth" :contentSize="contentSize"/>
            </div>
            </transition>

            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.05, null)" v-if="currentTime >= 95  && isOptionSelected">
                <app-select-percentage :windowWidth="windowWidth" :contentSize="contentSize" :selectOption="selectOption"/>
            </div>
            </transition>
            
            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.05, null)" v-if="currentTime >= 106  && !isYearSelected">
                <app-select-year :windowWidth="windowWidth" :contentSize="contentSize" :selectOption="selectOption" :selectPercentage="selectPercentage"/>
            </div>
            </transition>

            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.045, null)" v-if="currentTime >= 110 && !isSalaryInfoSubmitted">
                <app-input-gmi :windowWidth="windowWidth" :contentSize="contentSize" :selectOption="selectOption" :selectYear="selectYear" :selectPercentage="selectPercentage"/>
            </div>
            </transition>

            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.045, null)" v-if="currentTime >= 112 && isSalaryInfoSubmitted">
                <app-input-date :windowWidth="windowWidth" :contentSize="contentSize" :selectOption="selectOption" :selectYear="selectYear" :selectPercentage="selectPercentage" :salaryInfo="salaryInfo"/>
            </div>
            </transition>
            
            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.05, null)" v-if="currentTime >= 117  && !isPeriodSelected">
                <app-select-period :windowWidth="windowWidth" :contentSize="contentSize" :selectOption="selectOption" :selectYear="selectYear" :salaryInfo="salaryInfo" :datepickerInfo="datepickerInfo" :selectPercentage="selectPercentage"/>
            </div>
            </transition>

            <div :style="overlayStyl(1500, 0, null, 0, null)" v-if="currentTime >= 124" && isPercentageY>
                <app-content-notapple-two :currentTime="currentTime" :windowWidth="windowWidth" :contentSize="contentSize" :selectY="selectY"/>
            </div>

            <div :style="overlayStyl(1500, 0, null, 0, null)" v-if="currentTime >= 124" && isPercentageN>
                <app-content-notapple-three :currentTime="currentTime" :windowWidth="windowWidth" :contentSize="contentSize" :selectN="selectN"/>
            </div>
        </div>
    </div>
</template>

<script>
import Vue from 'vue'
import './custom-theme.css'
import SelectOption from './interactions/SelectOption'
import SelectPercentage from './interactions/SelectPercentage'
import SelectYear from './interactions/SelectYear'
import InputGmi from './interactions/InputGmi'
import InputDate from './interactions/InputDate'
import SelectPeriod from './interactions/SelectPeriod'
import DisableDiv from '../video/DisableDiv'
import ContentNotappleTwo from './ContentNotappleTwo'
import ContentNotappleThree from './ContentNotappleThree'

export default {
    data() {
        return {
            windowWidth: 0,
            windowHeight: 0,
            duration: 0,
            currentTime: 0,
            videoStatus: null,
            videoStatusUp: {},
            contentBorderStyl: {},
            playerOptions: {
                    autoplay: false,
                    muted: false,
                    language: 'en',
                    controls: true,
                    sources: [{
                    type: "video/mp4",
                    src: "/static/workspace/content/videos/fsspartone-0MnJ3tp12JzE_beta.mp4",
                }],
                poster: "/static/workspace/content/images/0.jpg"                
                },
        }
    },
    computed: {
        player() {
            return this.$refs.videoPlayer.player
        },
        salaryInfo () {
            return this.$store.getters['tal/salaryInfo']
        },
        isSalaryInfoSubmitted () {
            return this.$store.getters['tal/isSalaryInfoSubmitted']
        },
        datepickerInfo () {
            return this.$store.getters['tal/datepickerInfo']
        },
        isDatepickerInfoSubmitted () {
            return this.$store.getters['tal/isDatepickerInfoSubmitted']
        },
        selectOption () {
            return this.$store.getters['tal/selectOption']
        },
        selectPercentage () {
            return this.$store.getters['tal/selectPercentage']
        },
        selectY () {
            return this.$store.getters['tal/selectY']
        },
        selectN () {
            return this.$store.getters['tal/selectN']
        },
        isOptionSelected (){
            return this.$store.getters['tal/isOptionSelected']
        },
        isPercentageSelected (){
            return this.$store.getters['tal/isPercentageSelected']
        },
        isPercentageY (){
            return this.$store.getters['tal/isPercentageY']
        },
        isPercentageN (){
            return this.$store.getters['tal/isPercentageN']
        },
        selectYear () {
            return this.$store.getters['tal/selectYear']
        },
        isYearSelected (){
            return this.$store.getters['tal/isYearSelected']
        },
        selectPeriod () {
            return this.$store.getters['tal/selectPeriod']
        },
        isPeriodSelected (){
            return this.$store.getters['tal/isPeriodSelected']
        },
        pausePlayed () {
            return this.$store.getters['tal/pausePlayed'](this.currentTime, this.isOptionSelected)
        },
        pausePlayedY () {
            return this.$store.getters['tal/pausePlayedY'](this.currentTime, this.isPercentageY)
        },
        pausePlayedN () {
            return this.$store.getters['tal/pausePlayedN'](this.currentTime, this.isPercentageN)
        },
        pausePlayedYear () {
            return this.$store.getters['tal/pausePlayedYear'](this.currentTime, this.isYearSelected)
        },
        pausePlayedSalary () {
            return this.$store.getters['tal/pausePlayedSalary'](this.currentTime, this.isSalaryInfoSubmitted)
        },
        pausePlayedDatepicker () {
            return this.$store.getters['tal/pausePlayedDatepicker'](this.currentTime, this.isDatepickerInfoSubmitted)
        },
        selectSalary () {
            return this.$store.getters['tal/selectSalary']
        },
        isSalarySelected (){
            return this.$store.getters['tal/isSalarySelected']
        },
        pausePlayedPeriod () {
            return this.$store.getters['tal/pausePlayedPeriod'](this.currentTime, this.isPeriodSelected)
        },
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        contentSize () {
            return this.$store.getters['video/contentSize'](this.windowWidth, this.windowHeight)
        },
        overlayStyl () {
            return this.$store.getters['video/overlayStyl'](this.contentSize)
        },
        outerStyl () {
            return this.$store.getters['video/outerStyl'](this.contentSize)
        }
    },
    watch: {
        setOverlayStyl (overlay) {
            return this.overlayStyl(overlay.opacity, overlay.top, overlay.bottom, overlay.left, overlay.right)
        },
        isSalaryInfoSubmitted () {
            if (this.isSalaryInfoSubmitted) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                    this.player.play()
                }, 200)
            }
        },
        isDatepickerInfoSubmitted () {
            if (this.isDatepickerInfoSubmitted) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                    this.player.play()
                }, 200)
            }
        },
        pausePlayed () {
            if (this.pausePlayed) {
                setTimeout(() => {
                    this.player.pause()
                }, 200)  
            }
        },
        pausePlayedY () {
            if (this.pausePlayedY) {
                setTimeout(() => {
                    this.player.pause()
                }, 200)  
            }
        },
        pausePlayedN () {
            if (this.pausePlayedN) {
                setTimeout(() => {
                    this.player.pause()
                }, 200)  
            }
        },
        pausePlayedYear () {
            if (this.pausePlayedYear) {
                setTimeout(() => {
                    this.player.pause()
                }, 200)
            }
        },
        pausePlayedPeriod () {
            if (this.pausePlayedPeriod) {
                setTimeout(() => {
                    this.player.pause()
                }, 200)
            }
        },
        pausePlayedSalary () {
            if (this.pausePlayedSalary) {
                setTimeout(() => {
                    this.player.pause()
                }, 200)
            }
        },
        pausePlayedDatepicker () {
            if (this.pausePlayedDatepicker) {
                setTimeout(() => {
                    this.player.pause()
                }, 200)
            }
        },
        isOptionSelected () {
            if (this.isOptionSelected) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                    this.player.play()
                }, 200)
            }
        },
        isPercentageY () {
            if (this.isPercentageY) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                    this.player.play()
                }, 200)
            }
        },
        isPercentageN () {
            if (this.isPercentageN) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                    this.player.play()
                }, 200)
            }
        },
        isYearSelected () {
            if (this.isYearSelected) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                    this.player.play()
                }, 200)
            }
        },
        isPeriodSelected () {
            if (this.isPeriodSelected) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                    this.player.play()
                }, 200)
            }
        }
    },
    methods: {
        getWindowSize () {
            this.windowWidth = document.documentElement.clientWidth
            this.windowHeight = document.documentElement.clientHeight
            this.$store.commit('video/updateWindowSize', { width: this.windowWidth, height: this.windowHeight })
            
            this.player.width(this.contentSize.width)
            this.player.height(this.contentSize.height)
                if (!this.player.paused()) {
                    setTimeout(() => {
                        this.player.muted(false)
                        this.player.currentTime(this.currentTime)
                        this.player.play()
                    }, 200)
                }
            else {
                setTimeout(() => {
                    this.player.pause()
                }, 200)
            }
        },
        onPlayerPlay(player) {
            this.videoStatus = 'play'
        },
        onPlayerPause(player) {
            this.videoStatus = 'paused'
            this.duration = player.duration()
            this.currentTime = player.currentTime()
        },
        onPlayerEnded(player) {
            this.videoStatus = 'ended'
        },
        onPlayerLoadeddata(player) {
        },
        onPlayerWaiting(player) {
            //this.videoStatus = 'waiting'
        },
        onPlayerPlaying(player) {
            this.videoStatus = 'playing'
        },
        onPlayerTimeupdate(player) {
            if (!isNaN(player.duration()) && isFinite(player.duration())) {
                this.duration = player.duration()
                this.currentTime = player.currentTime()
            }
        },
        onPlayerCanplay(player) {
            this.videoStatus = 'canplay'
        },
        onPlayerCanplaythrough(player) {
        },
        playerStateChanged(playerCurrentState) {
            this.videoStatusUp = JSON.stringify(playerCurrentState)
        },
        playerReadied(player) {
        }
    },
    mounted() {
        this.$nextTick(function() {
            window.addEventListener('resize', this.getWindowSize)
            this.getWindowSize()
        })
    },
    beforeDestroy() {
        window.removeEventListener('resize', this.getWindowSize)
    },
    components: {
        appSelectOption: SelectOption,
        appSelectPercentage: SelectPercentage,
        appSelectYear: SelectYear,
        appSelectPeriod: SelectPeriod,
        appInputGmi: InputGmi,
        appInputDate: InputDate,
        appContentNotappleTwo: ContentNotappleTwo,
        appContentNotappleThree: ContentNotappleThree,
        appDisableDiv: DisableDiv
    }
}
</script>

<style>
.tmp {
    border: 2px solid white;
}

.slide-fade-enter-active {
  transition: all .2s ease;
}

.slide-fade-leave-active {
  transition: all .2s cubic-bezier(1.0, 0.5, 0.8, 1.0);
}

.slide-fade-enter, .slide-fade-leave-to{
  transform: translateX(5px);
  opacity: 0;
}
</style>

8. ContentNotappleThree.vue
<template>
    <div :style="contentBorderStyl">
        <div :style="outerStyl">
            <video-player 
                class="vjs-custom-skin"
                ref="videoPlayer"
                :options="playerOptions"
                :playsinline="true"
                @play="onPlayerPlay($event)"
                @pause="onPlayerPause($event)"
                @ended="onPlayerEnded($event)"
                @loadeddata="onPlayerLoadeddata($event)"
                @waiting="onPlayerWaiting($event)"
                @playing="onPlayerPlaying($event)"
                @timeupdate="onPlayerTimeupdate($event)"
                @canplay="onPlayerCanplay($event)"
                @canplaythrough="onPlayerCanplaythrough($event)"
                @ready="playerReadied"
                @statechanged="playerStateChanged($event)"
            >
            </video-player>
        </div>
    </div>
</template>

<script>
import Vue from 'vue'
import './custom-theme.css'

export default {
    props: ['selectN'],

    data() {
        return {
            windowWidth: 0,
            windowHeight: 0,
            duration: 0,
            currentTime: 0,
            videoStatus: null,
            videoStatusUp: {},
            contentBorderStyl: {},
            playerOptions: {
                    autoplay: true,
                    muted: false,
                    language: 'en',
                    controls: true,
                    sources: [{
                    type: "video/mp4",
                    src: "/static/workspace/content/videos/fsspartthree-0VZM21hJmsQM_beta.mp4",
            }],
            poster: "/static/workspace/content/images/Find-a-planner_Sam.png"             
            }
        }
    },
    computed: {
        player() {
            return this.$refs.videoPlayer.player
        },
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        contentSize () {
            return this.$store.getters['video/contentSize'](this.windowWidth, this.windowHeight)
        },
        overlayStyl () {
            return this.$store.getters['video/overlayStyl'](this.contentSize)
        },
        outerStyl () {
            return this.$store.getters['video/outerStyl'](this.contentSize)
        }
    },
    watch: {
    },
    methods: {
        getWindowSize () {
            this.windowWidth = document.documentElement.clientWidth
            this.windowHeight = document.documentElement.clientHeight
            this.$store.commit('video/updateWindowSize', { width: this.windowWidth, height: this.windowHeight })
            
            this.player.width(this.contentSize.width)
            this.player.height(this.contentSize.height)
            if (!this.pausePlayed) {
                if (!this.player.paused()) {
                    setTimeout(() => {
                        this.player.muted(false)
                        this.player.currentTime(this.currentTime)
                        this.player.play()
                    }, 200)
                }
            } else {
                setTimeout(() => {
                    this.player.pause()
                }, 200) 
            }
        },
        onPlayerPlay(player) {
            this.videoStatus = 'play'
        },
        onPlayerPause(player) {
            this.videoStatus = 'paused'
            this.duration = player.duration()
            this.currentTime = player.currentTime()
        },
        onPlayerEnded(player) {
            this.videoStatus = 'ended'
        },
        onPlayerLoadeddata(player) {
        },
        onPlayerWaiting(player) {
            //this.videoStatus = 'waiting'
        },
        onPlayerPlaying(player) {
            this.videoStatus = 'playing'
        },
        onPlayerTimeupdate(player) {
            if (!isNaN(player.duration()) && isFinite(player.duration())) {
                this.duration = player.duration()
                this.currentTime = player.currentTime()
            }
        },
        onPlayerCanplay(player) {
            this.videoStatus = 'canplay'
        },
        onPlayerCanplaythrough(player) {},
        playerStateChanged(playerCurrentState) {
            this.videoStatusUp = JSON.stringify(playerCurrentState)
        },
        playerReadied(player) {}
    },
    mounted() {
        this.$nextTick(function() {
            window.addEventListener('resize', this.getWindowSize)
            this.getWindowSize()
        })
    },
    beforeDestroy() {
        window.removeEventListener('resize', this.getWindowSize)
    },
    components: {
    }
}
</script>

<style>
.tmp {
    border: 2px solid black;
}

.slide-fade-enter-active {
  transition: all .2s ease;
}

.slide-fade-leave-active {
  transition: all .2s cubic-bezier(1.0, 0.5, 0.8, 1.0);
}

.slide-fade-enter, .slide-fade-leave-to{
  transform: translateX(5px);
  opacity: 0;
}
</style>

9. ContentNotappleTwo.vue
<template>
    <div :style="contentBorderStyl">
        <div :style="outerStyl">
            <video-player 
                class="vjs-custom-skin"
                ref="videoPlayer"
                :options="playerOptions"
                :playsinline="true"
                @play="onPlayerPlay($event)"
                @pause="onPlayerPause($event)"
                @ended="onPlayerEnded($event)"
                @loadeddata="onPlayerLoadeddata($event)"
                @waiting="onPlayerWaiting($event)"
                @playing="onPlayerPlaying($event)"
                @timeupdate="onPlayerTimeupdate($event)"
                @canplay="onPlayerCanplay($event)"
                @canplaythrough="onPlayerCanplaythrough($event)"
                @ready="playerReadied"
                @statechanged="playerStateChanged($event)"
            >
            </video-player>
<!--
            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.045, null)" v-if="currentTime >= 3 && !isDownloadInfoSubmitted">
                <app-download-file :windowWidth="windowWidth" :contentSize="contentSize"/>
            </div>
            </transition>

            <div :style="overlayStyl(1500, 0, null, 0, null)" v-if="pausePlayed">
                <app-disable-div :contentSize="contentSize"/>
            </div>-->
        </div>
    </div>
</template>

<script>
import Vue from 'vue'
import './custom-theme.css'
//import DownloadFile from './interactions/DownloadFile'

export default {
    props: ['selectY'],

    data() {
        return {
            windowWidth: 0,
            windowHeight: 0,
            duration: 0,
            currentTime: 0,
            videoStatus: null,
            videoStatusUp: {},
            contentBorderStyl: {},
            playerOptions: {
                    autoplay: true,
                    muted: false,
                    language: 'en',
                    controls: true,
                    sources: [{
                    type: "video/mp4",
                    src: "/static/workspace/content/videos/fssparttwo-0d2Vk8Jzt3XI_beta.mp4",
            }],
            poster: "/static/workspace/content/images/Find-a-planner_Sam.png"             
            }
        }
    },
    computed: {
        player() {
            return this.$refs.videoPlayer.player
        },
        /*selectPercentage () {
            return this.$store.getters['tal/selectPercentage']
        },
        isPercentageSelected (){
            return this.$store.getters['tal/isPercentageSelected']
        },*/
        /*
        userInfo () {
            return this.$store.getters['tal/userInfo']
        },
        isUserInfoSubmitted () {
            return this.$store.getters['tal/isUserInfoSubmitted']
        },
        isOptionSelected (){
            return this.$store.getters['tal/isOptionSelected']
        },
        isTermChecked (){
            return this.$store.getters['tal/isTermChecked']
        },
        isEditSelected (){
            return this.$store.getters['tal/isEditSelected']
        },
        welcome () {
            return this.$store.getters['tal/welcome']
        },
        info () {
            return this.$store.getters['tal/info']
        },
        warn () {
            return this.$store.getters['tal/warn']
        },
        lose () {
            return this.$store.getters['tal/lose']
        },
        opt () {
            return this.$store.getters['tal/opt']
        },
        balanceInfo () {
            return this.$store.getters['tal/balanceInfo']
        },
        options () {
            return this.$store.getters['tal/options']
        },
        selectOption () {
            return this.$store.getters['tal/selectOption']
        },
        brief () {
            return this.$store.getters['tal/brief']
        },
        isTrackSelected () {
            return this.$store.getters['tal/isTrackSelected']
        },
        pausePlay () {
            return this.$store.getters['tal/pausePlay'](this.currentTime, this.isUserInfoSubmitted)
        },
        pausePlayed () {
            return this.$store.getters['tal/pausePlayed'](this.currentTime, this.isOptionSelected)
        },*/
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        contentSize () {
            return this.$store.getters['video/contentSize'](this.windowWidth, this.windowHeight)
        },
        overlayStyl () {
            return this.$store.getters['video/overlayStyl'](this.contentSize)
        },
        outerStyl () {
            return this.$store.getters['video/outerStyl'](this.contentSize)
        }
    },
    watch: {
        /*isUserInfoSubmitted () {
            if (this.isUserInfoSubmitted) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                    this.player.play()
                }, 200)
            }
        },
        pausePlayed () {
            if (this.pausePlayed) {
                setTimeout(() => {
                    this.player.pause()
                }, 200)  
            }
        },
        isOptionSelected () {
            if (this.isOptionSelected) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                    this.player.play()
                }, 200)
            }
        },
        isTermChecked () {
            if (this.isTermChecked) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                }, 200)
            }
        },
        isEditSelected () {
            if (this.isEditSelected) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                }, 200)
            }
        }*/
    },
    methods: {
        getWindowSize () {
            this.windowWidth = document.documentElement.clientWidth
            this.windowHeight = document.documentElement.clientHeight
            this.$store.commit('video/updateWindowSize', { width: this.windowWidth, height: this.windowHeight })
            
            this.player.width(this.contentSize.width)
            this.player.height(this.contentSize.height)
            if (!this.pausePlayed) {
                if (!this.player.paused()) {
                    setTimeout(() => {
                        this.player.muted(false)
                        this.player.currentTime(this.currentTime)
                        this.player.play()
                    }, 200)
                }
            } else {
                setTimeout(() => {
                    this.player.pause()
                }, 200) 
            }
        },
        onPlayerPlay(player) {
            this.videoStatus = 'play'
        },
        onPlayerPause(player) {
            this.videoStatus = 'paused'
            this.duration = player.duration()
            this.currentTime = player.currentTime()
        },
        onPlayerEnded(player) {
            this.videoStatus = 'ended'
        },
        onPlayerLoadeddata(player) {
        },
        onPlayerWaiting(player) {
            //this.videoStatus = 'waiting'
        },
        onPlayerPlaying(player) {
            this.videoStatus = 'playing'
        },
        onPlayerTimeupdate(player) {
            if (!isNaN(player.duration()) && isFinite(player.duration())) {
                this.duration = player.duration()
                this.currentTime = player.currentTime()
            }
        },
        onPlayerCanplay(player) {
            this.videoStatus = 'canplay'
        },
        onPlayerCanplaythrough(player) {},
        playerStateChanged(playerCurrentState) {
            this.videoStatusUp = JSON.stringify(playerCurrentState)
        },
        playerReadied(player) {}
    },
    mounted() {
        this.$nextTick(function() {
            window.addEventListener('resize', this.getWindowSize)
            this.getWindowSize()
        })
    },
    beforeDestroy() {
        window.removeEventListener('resize', this.getWindowSize)
    },
    components: {
        //appDownloadFile: DownloadFile
    }
}
</script>

<style>
.tmp {
    border: 2px solid black;
}

.slide-fade-enter-active {
  transition: all .2s ease;
}

.slide-fade-leave-active {
  transition: all .2s cubic-bezier(1.0, 0.5, 0.8, 1.0);
}

.slide-fade-enter, .slide-fade-leave-to{
  transform: translateX(5px);
  opacity: 0;
}
</style>

10. ContentNotappleTwo.vue
<template>
    <div :style="contentBorderStyl">
        <div :style="outerStyl">
            <video-player 
                class="vjs-custom-skin"
                ref="videoPlayer"
                :options="playerOptions"
                :playsinline="true"
                @play="onPlayerPlay($event)"
                @pause="onPlayerPause($event)"
                @ended="onPlayerEnded($event)"
                @loadeddata="onPlayerLoadeddata($event)"
                @waiting="onPlayerWaiting($event)"
                @playing="onPlayerPlaying($event)"
                @timeupdate="onPlayerTimeupdate($event)"
                @canplay="onPlayerCanplay($event)"
                @canplaythrough="onPlayerCanplaythrough($event)"
                @ready="playerReadied"
                @statechanged="playerStateChanged($event)"
            >
            </video-player>
<!--
            <transition name="slide-fade">
            <div :style="overlayStyl(2000, 0.1, null, 0.045, null)" v-if="currentTime >= 3 && !isDownloadInfoSubmitted">
                <app-download-file :windowWidth="windowWidth" :contentSize="contentSize"/>
            </div>
            </transition>

            <div :style="overlayStyl(1500, 0, null, 0, null)" v-if="pausePlayed">
                <app-disable-div :contentSize="contentSize"/>
            </div>-->
        </div>
    </div>
</template>

<script>
import Vue from 'vue'
import './custom-theme.css'
//import DownloadFile from './interactions/DownloadFile'

export default {
    props: ['selectY'],

    data() {
        return {
            windowWidth: 0,
            windowHeight: 0,
            duration: 0,
            currentTime: 0,
            videoStatus: null,
            videoStatusUp: {},
            contentBorderStyl: {},
            playerOptions: {
                    autoplay: true,
                    muted: false,
                    language: 'en',
                    controls: true,
                    sources: [{
                    type: "video/mp4",
                    src: "/static/workspace/content/videos/fssparttwo-0d2Vk8Jzt3XI_beta.mp4",
            }],
            poster: "/static/workspace/content/images/Find-a-planner_Sam.png"             
            }
        }
    },
    computed: {
        player() {
            return this.$refs.videoPlayer.player
        },
        /*selectPercentage () {
            return this.$store.getters['tal/selectPercentage']
        },
        isPercentageSelected (){
            return this.$store.getters['tal/isPercentageSelected']
        },*/
        /*
        userInfo () {
            return this.$store.getters['tal/userInfo']
        },
        isUserInfoSubmitted () {
            return this.$store.getters['tal/isUserInfoSubmitted']
        },
        isOptionSelected (){
            return this.$store.getters['tal/isOptionSelected']
        },
        isTermChecked (){
            return this.$store.getters['tal/isTermChecked']
        },
        isEditSelected (){
            return this.$store.getters['tal/isEditSelected']
        },
        welcome () {
            return this.$store.getters['tal/welcome']
        },
        info () {
            return this.$store.getters['tal/info']
        },
        warn () {
            return this.$store.getters['tal/warn']
        },
        lose () {
            return this.$store.getters['tal/lose']
        },
        opt () {
            return this.$store.getters['tal/opt']
        },
        balanceInfo () {
            return this.$store.getters['tal/balanceInfo']
        },
        options () {
            return this.$store.getters['tal/options']
        },
        selectOption () {
            return this.$store.getters['tal/selectOption']
        },
        brief () {
            return this.$store.getters['tal/brief']
        },
        isTrackSelected () {
            return this.$store.getters['tal/isTrackSelected']
        },
        pausePlay () {
            return this.$store.getters['tal/pausePlay'](this.currentTime, this.isUserInfoSubmitted)
        },
        pausePlayed () {
            return this.$store.getters['tal/pausePlayed'](this.currentTime, this.isOptionSelected)
        },*/
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        contentSize () {
            return this.$store.getters['video/contentSize'](this.windowWidth, this.windowHeight)
        },
        overlayStyl () {
            return this.$store.getters['video/overlayStyl'](this.contentSize)
        },
        outerStyl () {
            return this.$store.getters['video/outerStyl'](this.contentSize)
        }
    },
    watch: {
        /*isUserInfoSubmitted () {
            if (this.isUserInfoSubmitted) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                    this.player.play()
                }, 200)
            }
        },
        pausePlayed () {
            if (this.pausePlayed) {
                setTimeout(() => {
                    this.player.pause()
                }, 200)  
            }
        },
        isOptionSelected () {
            if (this.isOptionSelected) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                    this.player.play()
                }, 200)
            }
        },
        isTermChecked () {
            if (this.isTermChecked) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                }, 200)
            }
        },
        isEditSelected () {
            if (this.isEditSelected) {
                setTimeout(() => {
                    this.player.muted(false)
                    this.player.currentTime(this.currentTime)
                }, 200)
            }
        }*/
    },
    methods: {
        getWindowSize () {
            this.windowWidth = document.documentElement.clientWidth
            this.windowHeight = document.documentElement.clientHeight
            this.$store.commit('video/updateWindowSize', { width: this.windowWidth, height: this.windowHeight })
            
            this.player.width(this.contentSize.width)
            this.player.height(this.contentSize.height)
            if (!this.pausePlayed) {
                if (!this.player.paused()) {
                    setTimeout(() => {
                        this.player.muted(false)
                        this.player.currentTime(this.currentTime)
                        this.player.play()
                    }, 200)
                }
            } else {
                setTimeout(() => {
                    this.player.pause()
                }, 200) 
            }
        },
        onPlayerPlay(player) {
            this.videoStatus = 'play'
        },
        onPlayerPause(player) {
            this.videoStatus = 'paused'
            this.duration = player.duration()
            this.currentTime = player.currentTime()
        },
        onPlayerEnded(player) {
            this.videoStatus = 'ended'
        },
        onPlayerLoadeddata(player) {
        },
        onPlayerWaiting(player) {
            //this.videoStatus = 'waiting'
        },
        onPlayerPlaying(player) {
            this.videoStatus = 'playing'
        },
        onPlayerTimeupdate(player) {
            if (!isNaN(player.duration()) && isFinite(player.duration())) {
                this.duration = player.duration()
                this.currentTime = player.currentTime()
            }
        },
        onPlayerCanplay(player) {
            this.videoStatus = 'canplay'
        },
        onPlayerCanplaythrough(player) {},
        playerStateChanged(playerCurrentState) {
            this.videoStatusUp = JSON.stringify(playerCurrentState)
        },
        playerReadied(player) {}
    },
    mounted() {
        this.$nextTick(function() {
            window.addEventListener('resize', this.getWindowSize)
            this.getWindowSize()
        })
    },
    beforeDestroy() {
        window.removeEventListener('resize', this.getWindowSize)
    },
    components: {
        //appDownloadFile: DownloadFile
    }
}
</script>

<style>
.tmp {
    border: 2px solid black;
}

.slide-fade-enter-active {
  transition: all .2s ease;
}

.slide-fade-leave-active {
  transition: all .2s cubic-bezier(1.0, 0.5, 0.8, 1.0);
}

.slide-fade-enter, .slide-fade-leave-to{
  transform: translateX(5px);
  opacity: 0;
}
</style>

interactions(folder)
a. BalanceInfo.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper">
                <span :style="setInputStyl()">{{ `${name}`+ ','}}<br>
                Your account-balance is less than $6,000 &
                last contribution was 2 years ago.
                </span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth', 'userInfo', 'welcome', 'info', 'warn', 'opt', 'lose','contentSize'],

    data() {
        return {}
    },

    computed: {
        name () {
            return this.$store.getters['tal/userInfo']
        },
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        userData(){
            return this.$store.getters['tal/userdata'];
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: {
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    color: #FFFFFF;
    background: linear-gradient(to bottom, #E91E63 0%, #263238 100%);
    border-radius: 10px;
    margin: 3px;
    border: solid;
    text-align: left;
    width: 40%;
    font-size: 0.80em;
    font-weight: bold;
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 265px;
    }
}

/* samsung s3*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 215px;
    }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 255px;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 215px;
    }
}

/*iPad*/
@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: portrait) 
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        width: 270px;
        text-align: center;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 480px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 180px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 180px;
    }
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    width: 227px;
    text-align: center;
  }
}

@media screen and (min-width: 992px) {
  .input-wrapper {
    width: 315px;
    text-align: center;
  }
}

.input-base {
    border: 1px solid #00BFA5;
    border-radius: 10px;
}
</style>

b. Brief.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper" ref="brief">
                <span :style="setInputStyl()"><u>{{ `${'Confirmation'}` }}</u><br>
                <u>Name</u>: {{name}}<br>
                <u>Option</u>: {{selectedOption}}<br>
                <v-btn v-if="show" color="purple darken-2" small dark id="crd" @click="editOption">Change</v-btn><br>
                <input type="checkbox" name="confirmation" value="terms" id='terms' @change="checkTerms"> I agree with
                <a target="_blank" href="https://www.tal.com.au/" @click.stop>TAL</a>
                's Terms & Conditions
                </span>
            </div>

            <transition name="slide-fade">
            <div v-if="!show" class="input-wrap" ref="options">
                <span :style="setInputStyl()"><u>{{ `${'Choose Option'}` }}</u><br>
                <input type="radio" id="optionOne" value="Keep cover" v-model="selected" @change="checkOption(selected)">
                <label for="optionOne">Opt to keep cover</label><br>
                <input type="radio" id="optionTwo" value="Lose cover" v-model="selected" @change="checkOption(selected)">
                <label for="optionTwo">Opt to lose cover</label><br>
                <input type="radio" id="optionThree" value="Contribute" v-model="selected" @change="checkOption(selected)">
                <label for="optionThree">Start contributing</label><br>
                <input type="radio" id="optionFour" value="Roll-in funds" v-model="selected" @change="checkOption(selected)">
                <label for="optionFour">Roll-in funds</label>
                </span>
            </div>
            </transition>

            <transition name="slide-fade">
            <div v-if="shownext" class="input-wrapper" ref="briefnext">
                <span :style="setInputStyl()"><u>{{ `${'Confirmation'}` }}</u><br>
                <u>Name</u>: {{name}}<br>
                <u>Option</u>: {{selectedOption}}<br>
                <input type="checkbox" name="confirmation" value="terms" id='terms' @change="checkTerms"> I agree with
                <a target="_blank" href="https://www.tal.com.au/" @click.stop>TAL</a>
                's Terms & Conditions
                </span>
            </div>
            </transition>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth', 'userInfo', 'welcome','info','warn','opt','lose','balanceInfo','options','selectOption','contentSize'],

    data() {
        return {
            selected: '',
            checked : false,
            submitted:false,
            show: true,
            shownext: false,
            lastVisitedTime: new Date().toDateString()+'-'+new Date().toLocaleTimeString()
        }
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        userData(){
            return this.$store.getters['tal/userdata'];
        },
        name () {
            return this.$store.getters['tal/userInfo']
        },
        selectedOption () {
            return this.$store.getters['tal/selectedOption'];
        },
        lastVisitTime () {
            return this.$store.getters['tal/lastVisitTime'];
        },
        isTermChecked () {
            return this.$store.getters['tal/isTermChecked'];
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden'
            }
        }
    },

    methods: {
        /*checkTerms(){
            if(location.href.indexOf("DS00001") !=-1 && this.name == "Daniel"){
                this.$store.commit('tal/selectedOption', this.selectedOption)
                this.$store.commit('tal/updateLastVisitTime', this.lastVisitedTime)
                console.log("User: "+ this.name);
                console.log("Option: "+ this.selectedOption);
                console.log("Time: "+ this.lastVisitedTime);
                if(localStorage.getItem('name')){
                    localStorage.setItem('option', this.selectedOption);
                    localStorage.setItem('lastVisitTime', this.lastVisitedTime);
                    localStorage.setItem("on_load_counter", this.siteCounter);
                }
                this.$refs.brief.style.display = "none";
                this.$store.commit('tal/updateIsTermChecked', true);
            } else if(location.href.indexOf("GS00002") !=-1 && this.name == "Galib"){
                this.$store.commit('tal/selectedOption', this.selectedOption)
                this.$store.commit('tal/updateLastVisitTime', this.lastVisitedTime)
                console.log("User: "+ this.name);
                console.log("Option: "+ this.selectedOption);
                console.log("Time: "+ this.lastVisitedTime);
                if(localStorage.getItem('name')){
                    localStorage.setItem('option', this.selectedOption);
                    localStorage.setItem('lastVisitTime', this.lastVisitedTime);
                }
                this.$refs.brief.style.display = "none";
                this.$store.commit('tal/updateIsTermChecked', true);
            } else if(location.href.indexOf("AY00003") !=-1 && this.name == "Andrew"){
                this.$store.commit('tal/selectedOption', this.selectedOption)
                this.$store.commit('tal/updateLastVisitTime', this.lastVisitedTime)
                console.log("User: "+ this.name);
                console.log("Option: "+ this.selectedOption);
                console.log("Time: "+ this.lastVisitedTime);
                if(localStorage.getItem('name')){
                    localStorage.setItem('option', this.selectedOption);
                    localStorage.setItem('lastVisitTime', this.lastVisitedTime);
                }
                this.$refs.brief.style.display = "none";
                this.$store.commit('tal/updateIsTermChecked', true);
            } else if(location.href.indexOf("RE00004") !=-1 && this.name == "Rene"){
                this.$store.commit('tal/selectedOption', this.selectedOption)
                this.$store.commit('tal/updateLastVisitTime', this.lastVisitedTime)
                console.log("User: "+ this.name);
                console.log("Option: "+ this.selectedOption);
                console.log("Time: "+ this.lastVisitedTime);
                if(localStorage.getItem('name')){
                    localStorage.setItem('option', this.selectedOption);
                    localStorage.setItem('lastVisitTime', this.lastVisitedTime);
                }
                this.$refs.brief.style.display = "none";
                this.$store.commit('tal/updateIsTermChecked', true);
            } else if(location.href.indexOf("JK00005") !=-1 && this.name == "Bernie"){
                this.$store.commit('tal/selectedOption', this.selectedOption)
                this.$store.commit('tal/updateLastVisitTime', this.lastVisitedTime)
                console.log("User: "+ this.name);
                console.log("Option: "+ this.selectedOption);
                console.log("Time: "+ this.lastVisitedTime);
                if(localStorage.getItem('name')){
                    localStorage.setItem('option', this.selectedOption);
                    localStorage.setItem('lastVisitTime', this.lastVisitedTime);
                }
                this.$refs.brief.style.display = "none";
                this.$store.commit('tal/updateIsTermChecked', true);
            } else if(location.href.indexOf("JP00006") !=-1 && this.name == "Justin"){
                this.$store.commit('tal/selectedOption', this.selectedOption)
                this.$store.commit('tal/updateLastVisitTime', this.lastVisitedTime)
                console.log("User: "+ this.name);
                console.log("Option: "+ this.selectedOption);
                console.log("Time: "+ this.lastVisitedTime);
                if(localStorage.getItem('name')){
                    localStorage.setItem('option', this.selectedOption);
                    localStorage.setItem('lastVisitTime', this.lastVisitedTime);
                }
                this.$refs.brief.style.display = "none";
                this.$store.commit('tal/updateIsTermChecked', true);
            } else if(location.href.indexOf("PK00007") !=-1 && this.name == "Peter"){
                this.$store.commit('tal/selectedOption', this.selectedOption)
                this.$store.commit('tal/updateLastVisitTime', this.lastVisitedTime)
                console.log("User: "+ this.name);
                console.log("Option: "+ this.selectedOption);
                console.log("Time: "+ this.lastVisitedTime);
                if(localStorage.getItem('name')){
                    localStorage.setItem('option', this.selectedOption);
                    localStorage.setItem('lastVisitTime', this.lastVisitedTime);
                }
                this.$refs.brief.style.display = "none";
                this.$store.commit('tal/updateIsTermChecked', true);
            } else if(location.href.indexOf("VS00008") !=-1 && this.name == "Vaibhav"){
                this.$store.commit('tal/selectedOption', this.selectedOption)
                this.$store.commit('tal/updateLastVisitTime', this.lastVisitedTime)
                console.log("User: "+ this.name);
                console.log("Option: "+ this.selectedOption);
                console.log("Time: "+ this.lastVisitedTime);
                if(localStorage.getItem('name')){
                    localStorage.setItem('option', this.selectedOption);
                    localStorage.setItem('lastVisitTime', this.lastVisitedTime);
                }
                this.$refs.brief.style.display = "none";
                this.$store.commit('tal/updateIsTermChecked', true);
            } else if(location.href.indexOf("YT00009") !=-1 && this.name == "Yegor"){
                this.$store.commit('tal/selectedOption', this.selectedOption)
                this.$store.commit('tal/updateLastVisitTime', this.lastVisitedTime)
                console.log("User: "+ this.name);
                console.log("Option: "+ this.selectedOption);
                console.log("Time: "+ this.lastVisitedTime);
                if(localStorage.getItem('name')){
                    localStorage.setItem('option', this.selectedOption);
                    localStorage.setItem('lastVisitTime', this.lastVisitedTime);
                }
                this.$refs.brief.style.display = "none";
                this.$store.commit('tal/updateIsTermChecked', true);
            } else if(location.href.indexOf("JC00010") !=-1 && this.name == "Joanna"){
                this.$store.commit('tal/selectedOption', this.selectedOption)
                this.$store.commit('tal/updateLastVisitTime', this.lastVisitedTime)
                console.log("User: "+ this.name);
                console.log("Option: "+ this.selectedOption);
                console.log("Time: "+ this.lastVisitedTime);
                if(localStorage.getItem('name')){
                    localStorage.setItem('option', this.selectedOption);
                    localStorage.setItem('lastVisitTime', this.lastVisitedTime);
                }
                this.$refs.brief.style.display = "none";
                this.$store.commit('tal/updateIsTermChecked', true);
            } else if(location.href.indexOf("BN00011") !=-1 && this.name == "Benjamin"){
                this.$store.commit('tal/selectedOption', this.selectedOption)
                this.$store.commit('tal/updateLastVisitTime', this.lastVisitedTime)
                console.log("User: "+ this.name);
                console.log("Option: "+ this.selectedOption);
                console.log("Time: "+ this.lastVisitedTime);
                if(localStorage.getItem('name')){
                    localStorage.setItem('option', this.selectedOption);
                    localStorage.setItem('lastVisitTime', this.lastVisitedTime);
                }
                this.$refs.brief.style.display = "none";
                this.$store.commit('tal/updateIsTermChecked', true);
            } else if(location.href.indexOf("KL00012") !=-1 && this.name == "Karen"){
                this.$store.commit('tal/selectedOption', this.selectedOption)
                this.$store.commit('tal/updateLastVisitTime', this.lastVisitedTime)
                console.log("User: "+ this.name);
                console.log("Option: "+ this.selectedOption);
                console.log("Time: "+ this.lastVisitedTime);
                if(localStorage.getItem('name')){
                    localStorage.setItem('option', this.selectedOption);
                    localStorage.setItem('lastVisitTime', this.lastVisitedTime);
                }
                this.$refs.brief.style.display = "none";
                this.$store.commit('tal/updateIsTermChecked', true);
            } else{
                this.$store.commit('tal/selectedOption', this.selectedOption)
                this.$store.commit('tal/updateLastVisitTime', this.lastVisitedTime)
                console.log("User: "+ this.name);
                console.log("Option: "+ this.selectedOption);
                console.log("Time: "+ this.lastVisitedTime);
                if(localStorage.getItem('name')){
                    localStorage.setItem('option', this.selectedOption);
                    localStorage.setItem('lastVisitTime', this.lastVisitedTime);
                }
                this.$refs.brief.style.display = "none";
                this.$store.commit('tal/updateIsTermChecked', true);
            }
        },*/
        checkTerms(){ //better and previous version
            this.$refs.brief.style.display = "none";
            this.$store.commit('tal/updateIsTermChecked', true);
        },
        editOption(){
            this.show = false;
            this.$refs.brief.style.display = "none";
            this.$store.commit('tal/updateIsEditSelected', true);
        },
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
        checkOption (v) {
            this.shownext = true;
            this.$store.commit('tal/selectedOption', this.selected);
            this.$store.commit('tal/updateIsOptionSelected', true);
            this.$refs.options.style.display = "none";
        },
        updateUserInfo (info) {
            this.$store.commit('tal/updateUserInfo', info)
        },
        updateVisitTime (info) {
            this.$store.commit('tal/updateVisitTime', info)
        },
        updateSelectOption (info) {
            this.$store.commit('tal/selectOption', info)
        }
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    color: #FFFFFF;
    background: linear-gradient(to bottom,#E91E63 0%, #263238 100%);
    border-radius: 10px;
    margin: 3px;
    border: solid;
    text-align: left;
    width: 53%;
    font-size: 0.8em;
    font-weight: bold;
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: portrait) { 
    .input-wrapper {
    width: 140px;
    }
}

/* samsung s3*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 198px;
    }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 235px;
    }
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 242px;
    }
}

/*iPad*/
@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: portrait) 
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        width: 245px;
        text-align: center;
    }
}

/* samsung s3*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 198px;
    }
}

/*iPhone 5SE*/
@media screen 
  and (width: 320px) 
  and (height: 568px)
  and (-webkit-device-pixel-ratio: 2)
  and (orientation: portrait) {
    .input-wrapper{
    width: 107px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 480px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 165px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 165px;
    }
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    width: 208px;
    text-align: center;
  }
}

@media screen and (min-width: 992px) {
  .input-wrapper {
    width: 290px;
    text-align: center;
  }
}

.input-base {
    border: 1px solid #00BFA5;
    border-radius: 10px;
}

#crd {
    width: 30px;
    height: 20px;
}

.wrapbtn {
    text-align: center;
}

.input-wrap {
    color: #FFFFFF;
    background: linear-gradient(to bottom, #7B1FA2 0%, #263238 100%);
    border-radius: 10px;
    margin: 3px;
    border: solid;
    text-align: left;
    width: 97%;
    font-size: 0.8em;
    font-weight: bold;
}

/* samsung s3*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrap{
        text-align: center;
        width: 200px;
    }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrap {
    text-align: center;
    width: 235px;
    }
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrap {
    text-align: center;
    width: 240px;
    }
}

/*iPad*/
@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: portrait) 
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrap{
        width: 245px;
        text-align: center;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrap{
        text-align: center;
        width: 200px;
    }
}

/*iPhone 5SE*/
@media screen 
  and (width: 320px) 
  and (height: 568px)
  and (-webkit-device-pixel-ratio: 2)
  and (orientation: portrait) {
    .input-wrap{
    width: 105px;
    }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: portrait) { 
    .input-wrap {
    text-align: center;
    width: 140px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 480px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrap{
    text-align: center;
    width: 165px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrap{
    text-align: center;
    width: 165px;
    }
}
/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrap {
    width: 210px;
    text-align: center;
  }
}

@media screen and (min-width: 992px) {
  .input-wrap {
    width: 290px;
    text-align: center;
  }
}
</style>

c. Diffwlc.vue
<template>
    <div></div>
</template>
<script>
import eventBus from '@/eventBus'

export default {
    props: ['currentTime', 'windowWidth', 'contentSize'],

    data() {
        return {}
    },

    methods:{
        playSound(sound){
            var audio =  new Audio(sound);
            audio.play();
        }
    },
    
    created(){   
        if(location.href.indexOf("DS00001") !=-1){
            this.playSound('./static/workspace/content/audios/welcomeDaniel.mp3');
        } else if(location.href.indexOf("GS00002") !=-1){
            this.playSound('./static/workspace/content/audios/welcomeGalib.mp3');
        } else if(location.href.indexOf("AY00003") !=-1){
            this.playSound('./static/workspace/content/audios/wandrew.mp3');
        } else if(location.href.indexOf("RE00004") !=-1){
            this.playSound('./static/workspace/content/audios/wrene.mp3');
        } else if(location.href.indexOf("JK00005") !=-1){
            this.playSound('./static/workspace/content/audios/wbernie.mp3');
        } else if(location.href.indexOf("JP00006") !=-1){
            this.playSound('./static/workspace/content/audios/wjustin.mp3');
        } else if(location.href.indexOf("PK00007") !=-1){
            this.playSound('./static/workspace/content/audios/wpeter.mp3');
        } else if(location.href.indexOf("VS00008") !=-1){
            this.playSound('./static/workspace/content/audios/wvbhv.mp3');
        } else if(location.href.indexOf("YT00009") !=-1){
            this.playSound('./static/workspace/content/audios/wyegor.mp3');
        } else if(location.href.indexOf("JC00010") !=-1){
            this.playSound('./static/workspace/content/audios/wjoanna.mp3');
        } else if(location.href.indexOf("BN00011") !=-1){
            this.playSound('./static/workspace/content/audios/wbenj.mp3');
        } else if(location.href.indexOf("KL00012") !=-1){
            this.playSound('./static/workspace/content/audios/wkaren.mp3');
        } else {
            this.playSound('./static/workspace/content/audios/wthere.mp3');
        }
    }
}
</script>

d. DisableDiv.vue
<template>
    <div :style="styl"></div>
</template>

<script>
export default {
    props: ['contentSize'],
    computed: {
        styl () {
            return {
                width: this.contentSize.width + 'px',
                height: this.contentSize.height + 'px',
                'background-color': '#B0BEC5',
                opacity: '0.2',
                filter: 'alpha(opacity=20)'         
            }
        }
    }
}
</script>

e. DownloadFile.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper" ref="inputs">
                <a href="/static/workspace/content/images/170131 Application for IP for Industry members_F.pdf" class="input-base" target="_blank" :style="setInputStyl()">Download</a>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth','contentSize'],
    data() {
        return {
            download: "",
            offsetTop: 0,
            buttonClicked: false
        }
    },
    computed: {
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        },
        isDownloadInfoSubmitted () {
            return this.$store.getters['tal/isDownloadInfoSubmitted']
        },
        pausePlayedDownload () {
            return this.$store.getters['tal/pausePlayedDownload'](this.currentTime, this.isDownloadInfoSubmitted)
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        }     
    },
    methods: {
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        updateDownloadInfo (info) {
            this.$store.commit('tal/updateDownloadInfo', info)
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            styl = Object.assign(styl, { 'border': '5px groove #E91E63', outline: 'none', 'color': 'FFFFFF' })
            return styl
        },
        submit () {
            this.buttonClicked = true 
                this.$store.commit('tal/updateIsDownloadInfoSubmitted', true)
                this.$refs.inputs.style.display = "none";
        }
    },
    /*watch: {
        currentTime () {
            if (this.currentTime > 111.8) {
                this.submit()
            }
        }
    }*/
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    border-radius: 10px;
    margin: 3px;
    font-size: 0.8em;
    font-weight: bold;
}

.input-base {
    border: 3px solid #E91E63;
    border-radius: 10px;
    font-family: 'Roboto', sans-serif;
    background-color: #E91E63;
    width: 96%;
    color: #000000;
}
</style>

f. Finishing.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper" ref="brief">
                <span :style="setInputStyl()"><u>{{ `${'Thank You'}` }}</u><br>
                {{ `${'For More Information'}` }}<br>
                {{ `${'Please Visit '}` }}<a target="_blank" href="https://www.tal.com.au/">TAL</a></span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth', 'userInfo', 'welcome','info','warn','opt','balanceInfo','options','selectOption','brief','lose','contentSize'],

    data() {
        return {
            tile: true,
        }
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        userData(){
            return this.$store.getters['tal/userdata'];
        },
        name () {
            return this.userName === undefined ? 'there' : this.userName.replace(/^[a-z]/,
            function (x) { 
                return x.toUpperCase()
            })
        },
        isOptionSelected () {
            return this.$store.getters['tal/isOptionSelected'];
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: { 
        checkTerms(){
            this.$refs.brief.style.display = "none";
        },
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        }
    },

    /*mounted() {
        console.log("Store Values:")
        console.log("WebsiteLoadingCounter: " +localStorage.WebsiteLoadingCounter + "; User: " +localStorage.name + "; Option: " +localStorage.option + "; Time: " +localStorage.lastVisitTime);
    }*/
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    color: #263238;
    background: linear-gradient(to bottom, #7B1FA2 0%, #E91E63 100%);
    border-radius: 10px;
    margin: 3px;
    border: solid;
    text-align: left;
    width: 96%;
    font-size: 0.8em;
    font-weight: bold;
}

@media screen and (min-width: 500px) {
  .input-wrapper {
    width: 140px;
    text-align: center;
  }
}

/*iPhone 5SE*/
@media screen 
  and (width: 320px) 
  and (height: 568px)
  and (-webkit-device-pixel-ratio: 2)
  and (orientation: portrait) {
    .input-wrapper{
    width: 95px;
    }
}

@media screen and (min-width: 992px) {
  .input-wrapper {
    width: 200px;
    text-align: center;
  }
}

.input-base {
    border: 1px solid #00BFA5;
    border-radius: 10px;
}

</style>

g. Income.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper">
                <span :style="setInputStyl()">{{ name }}</span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth','contentSize','selectOption','selectPercentage','currentTime'],

    data() {
        return {
            username: 'NewUser'
        }
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        isUserInfoSubmitted () {
            return this.$store.getters['tal/isUserInfoSubmitted']
        },
        name () {
                this.$store.commit('tal/updateUserInfo', this.username)
                this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                localStorage.setItem('name', this.username);
                return this.username;
        },

        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        userData(){
            return this.$store.getters['tal/userdata'];
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: {
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
        updateUserInfo (info) {
            this.$store.commit('tal/updateUserInfo', info)
        }
    }
}
</script>

<style scoped>
.input-wrapper {
    color: transparent;
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    color: transparent;
  }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrapper {
    color: transparent;
    }
}

@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: portrait) { 
    .input-wrapper {
    color: transparent;
    }
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    color: transparent;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrapper{
        color: transparent;
    }
}

/*iPhone 5SE*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 568px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    color: transparent;
    }
}

@media screen 
  and (width: 320px) 
  and (height: 568px)
  and (-webkit-device-pixel-ratio: 2)
  and (orientation: portrait) {
    .input-wrapper{
        color: transparent;
    }
}

/*iPad*/
@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: portrait) 
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        color: transparent;
    }
}

@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: landscape)
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        color: transparent;
    }
}

/*iPhone 4*/
@media only screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrapper{
    color: transparent;
    }
}

@media screen and (min-width: 992px) {
    .input-wrapper {
    color: transparent;
  }
}
</style>

h. Info.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper">
                <span :style="setInputStyl()"><u>{{ `${'Did you know'}` }}</u>?<br>
                On <u>30 June, 2018</u><br>
                New members of
                Age-group below 25
                </span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth', 'userInfo', 'welcome', 'contentSize'],

    data() {
        return {}
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        userData(){
            return this.$store.getters['tal/userdata'];
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: {
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    color: #FFFFFF;
    background: linear-gradient(to bottom, #7B1FA2 0%, #263238 100%);
    border-radius: 10px;
    margin: 3px;
    border: solid;
    text-align: left;
    width: 53%;
    font-size: 0.8em;
    font-weight: bold;
}

@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: portrait) { 
    .input-wrapper {
    width: 119px;
    text-align: center;
  }
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 230px;
    }
}

@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: portrait) { 
    .input-wrapper {
    text-align: center;
    width: 120px;
    }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: portrait) { 
    .input-wrapper {
        width: 135px;
    }
}

/*iPhone 5SE*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 568px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 187px;
    }
}

@media screen 
  and (width: 320px) 
  and (height: 568px)
  and (-webkit-device-pixel-ratio: 2)
  and (orientation: portrait) {
    .input-wrapper{
        width: 100px;
        text-align: center;
    }
}

/*iPad*/
@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: landscape)
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        text-align: center;
        width: 250px;
    }
}

@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: portrait)
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        text-align: center;
        width: 232px;
    }
}

@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 230px;
    }
}

@media screen 
  and (min-width: 320px)
  and (max-width: 640px) 
  and (-webkit-device-pixel-ratio: 2) 
  and (orientation: landscape) {
      .input-wrapper{
        text-align: center;
        width: 190px;
    }
}

@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) {
    .input-wrapper {
    text-align: center;
    width: 220px;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 187px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 480px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 155px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 155px;
    }
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    width: 195px;
    text-align: center;
  }
}

/*pc*/
@media screen and (min-width: 992px) {
  .input-wrapper {
    width: 270px;
    text-align: center;
  }
}

.input-base {
    border: 1px solid #00BFA5;
    border-radius: 10px;
}
</style>

i.InputDate.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper" ref="inputz">
                <input class="input-base" v-model="datepicker" :style="setInputStyl()" placeholder="Effective Date"><br/>
                <button class="input-base" :style="setInputStyl()" @click.prevent="submit">SUBMIT</button>
            </div>
        </v-layout>
        
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth','contentSize','selectOption','selectPercentage','selectYear','salaryInfo','datepickerInfo'],
    data() {
        return {
            datepicker: "",
            offsetTop: 0,
            btnClicked: false,
            date: new Date().toISOString().substr(0, 10),
            modal: false
        }
    },
    computed: {
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        },
        isDatepickerInfoSubmitted () {
            return this.$store.getters['tal/isSalaryInfoSubmitted']
        },
        pausePlayedDatepicker () {
            return this.$store.getters['tal/pausePlayedDatepicker'](this.currentTime, this.isDatepickerInfoSubmitted)
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        }     
    },
    methods: {
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        updateDatepickerInfo (info) {
            this.$store.commit('tal/updateDatepickerInfo', info)
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            styl = Object.assign(styl, { 'border': '5px groove #8E24AA', outline: 'none', 'color': 'FFFFFF' })
            return styl
        },
        submit () {
            this.btnClicked = true        
            this.$store.commit('tal/updateIsDatepickerInfoSubmitted', true)
            this.$refs.inputz.style.display = "none";
        }
    },
    watch: {
        currentTime () {
            if (this.currentTime > 115.7) {
                this.submit()
            }
        }
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    border-radius: 10px;
    margin: 3px;
    font-size: 0.8em;
    font-weight: bold;
}

.input-base {
    border: 3px solid #2196F3 ;
    border-radius: 10px;
    font-family: 'Roboto', sans-serif;
    background-color: #E91E63;
    width: 96%;
    color: #000000;
}
</style>

j. InputGmi.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <!--<div
                v-for="(info, i) in salaryInfo.slice(0, salaryInfo.length-1)"
                :key="i"
                class="input-wrapper"
            >
                <input
                    :placeholder="info.label"
                    class="input-base"
                    :style="setInputStyl(info.key)"
                    v-model="salaryInfo[i].value"
                    @input="updateSalaryInfo(info)"
                >
                
            </div>-->
            
            <div class="input-wrapper" ref="inputs">
                <input class="input-base" v-model="salary" :style="setInputStyl()" placeholder="Gross Income"><br/>
                <button class="input-base" :style="setInputStyl()" @click.prevent="submit">SUBMIT</button>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth','contentSize','selectOption','selectPercentage','selectYear'],
    data() {
        return {
            salary: "",
            offsetTop: 0,
            /*salaryInfo: [
                { label: 'Gross Monthly Income', key: 'gross', value: null },
                { label: 'Gross Monthly Income', key: 'income', value: null }
            ],*/
            //mandatoryFields: ['gross'],
            buttonClicked: false
        }
    },
    computed: {
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        },
        isSalaryInfoSubmitted () {
            return this.$store.getters['tal/isSalaryInfoSubmitted']
        },
        pausePlayedSalary () {
            return this.$store.getters['tal/pausePlayedSalary'](this.currentTime, this.isSalaryInfoSubmitted)
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        }     
    },
    methods: {
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        updateSalaryInfo (info) {
            this.$store.commit('tal/updateSalaryInfo', info)
        },
        //hasMandatoryValue (key) {          
            //return this.salaryInfo.filter(x => x.value !== null).map(x => x.key).includes(key)
            //return this.salaryInfo.includes(key)
        //},
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            styl = Object.assign(styl, { 'border': '5px groove #2196F3', outline: 'none', 'color': 'FFFFFF' })
            /*if (this.buttonClicked) {
                styl = Object.assign(styl, { 'border': '5px groove #2196F3', outline: 'none', 'color': '#E91E63' })
            }*/
            return styl
        },
        submit () {
            this.buttonClicked = true        
            //if(this.mandatoryFields.map(x => this.hasMandatoryValue(x)).filter(x => x === true).length === this.mandatoryFields.length) {
            //if(this.mandatoryFields.map(x => this.hasMandatoryValue(x)).filter(x => x === true).length === this.mandatoryFields.length) {
                this.$store.commit('tal/updateIsSalaryInfoSubmitted', true)
                //this.$refs.inputz.style.display = "none";
                this.$refs.inputs.style.display = "none";
            //}
        }
    },
    watch: {
        currentTime () {
            if (this.currentTime > 111.8) {
                this.submit()
            }
        }
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    border-radius: 10px;
    margin: 3px;
    font-size: 0.8em;
    font-weight: bold;
}

.input-base {
    border: 3px solid #E91E63;
    border-radius: 10px;
    font-family: 'Roboto', sans-serif;
    background-color: #8E24AA;
    width: 96%;
    color: #000000;
}
</style>

j. Lose.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper">
                <span :style="setInputStyl()">
                will lose their 
                Insurance Cover!
                </span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth', 'userInfo', 'welcome','info','warn', 'contentSize'],

    data() {
        return {}
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        userData(){
            return this.$store.getters['tal/userdata'];
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: {
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    color: #FFFFFF;
    background: linear-gradient(to bottom, #263238 0%, #7B1FA2 100%);
    border-radius: 10px;
    margin: 3px;
    border: solid;
    text-align: left;
    width: 50%;
    font-size: 0.8em;
    font-weight: bold;
}

/*.input-wrapper {
    text-shadow: 0 0 3px #8BC34A, 0 0 5px #F57C00;
    margin: 3px;
    text-align: left;
    width: 50%;
    font-size: 0.8em;
    font-weight: bold;
}*/

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 185px;
    }
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 190px;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 160px;
    }
}

/*iPad*/
@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: portrait)
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        text-align: center;
        width: 195px;
    }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: portrait) { 
    .input-wrapper {
    text-align: center;
    width: 110px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 480px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 135px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 135px;
    }
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    width: 165px;
    text-align: center;
  }
}

@media screen and (min-width: 992px) {
  .input-wrapper {
    width: 230px;
    text-align: center;
  }
}

.input-base {
    border: 1px solid #00BFA5;
    border-radius: 10px;
}
</style>

j. Messages.vue
<template>
    <div>
        <div v-if="whichToOpen==='Message1'">

        </div>
        <div v-else-if="whichToOpen==='Balance'">
        </div>
    </div>

</template>

<script>
export default {
    props: ['currentTime', 'condition1', 'condition2'],
    data () {
        return {

        }
    },
    computed: {
        whichToOpen () {
            return this.$store.getters['tal/whichToOpen'](this.currentTime, this.condition1, this.condition2)
        }
    },
    components: {
        appMessage1: Message1,
        appBalance: Balance
    }
}
</script>

k. Opt.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper">
                <span :style="setInputStyl()"><u>{{ `${'Did you know'}` }}</u>?<br>
                Members who received 
                their last super 
                contribution more 
                than 13 months ago
                </span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth', 'userInfo', 'welcome','info','warn', 'contentSize'],

    data() {
        return {}
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        userData(){
            return this.$store.getters['tal/userdata'];
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: {
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    color: #263238;
    background: linear-gradient(to bottom, #7B1FA2 0%, #E91E63 100%);
    border-radius: 10px;
    margin: 3px;
    border: solid;
    text-align: left;
    width: 36%;
    font-size: 0.8em;
    font-weight: bold;
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 230px;
    }
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 240px;
    }
}

/*iPhone 5SE*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 568px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 195px;
    }
}

/* samsung s3*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 195px;
    }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 230px;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 196px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 480px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 162px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 162px;
    }
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    width: 205px;
    text-align: center;
  }
}

@media screen and (min-width: 992px) {
  .input-wrapper {
    width: 280px;
    text-align: center;
  }
}

.input-base {
    border: 1px solid #00BFA5;
    border-radius: 10px;
}
</style>

l. Optionnow.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper">
                <span :style="setInputStyl()">
                So, what are your options?
                </span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth', 'userInfo', 'welcome','info','warn', 'lose', 'contentSize'],

    data() {
        return {}
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        userData(){
            return this.$store.getters['tal/userdata'];
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: {
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    color: #263238;
    background: linear-gradient(to bottom, #F57C00 0%, #8BC34A 100%);
    border-radius: 10px;
    margin: 3px;
    border: solid;
    text-align: left;
    width: 50%;
    font-size: 0.8em;
    font-weight: bold;
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 155px;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 140px;
    }
}

/*iPad*/
@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: portrait) 
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        width: 160px;
        text-align: center;
    }
}

/*iPhone 5SE*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 568px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: portrait) {
    .input-wrapper{
    text-align: center;
    width: 70px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 480px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 115px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 115px;
    }
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    width: 140px;
    text-align: center;
  }
}

@media screen and (min-width: 992px) {
  .input-wrapper {
    width: 190px;
    text-align: center;
  }
}

.input-base {
    border: 1px solid #00BFA5;
    border-radius: 10px;
}
</style>

m. Options.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper">
                <span :style="setInputStyl()"><u>{{ `${'Attention'}` }}</u><br>
                Unless you opt to keep your cover,
                you will lose your cover on 30 June 2018.</span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth', 'userInfo', 'welcome','info','warn','opt','balanceInfo', 'lose','contentSize'],

    data() {
        return {}
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        userData(){
            return this.$store.getters['tal/userdata'];
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: {
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    color: #263238;
    background: linear-gradient(to bottom, #7B1FA2 0%, #E91E63 100%);
    border-radius: 10px;
    margin: 3px;
    border: solid;
    text-align: left;
    width: 35%;
    font-size: 0.8em;
    font-weight: bold;
}

/* samsung s3*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 180px;
    }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 215px;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 180px;
    }
}

/*iPad*/
@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: portrait) 
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        width: 220px;
        text-align: center;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 480px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 150px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px) 
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 150px;
    }
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    width: 192px;
    text-align: center;
  }
}

@media screen and (min-width: 992px) {
  .input-wrapper {
    width: 265px;
    text-align: center;
  }
}

.input-base {
    border: 1px solid #00BFA5;
    border-radius: 10px;
}
</style>

n. SelectOption.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper" ref="options">
                <span :style="setInputStyl()"><u>{{ `${'Choose Percentage'}` }}</u><br>
                <input type="radio" id="seventyfive" value="seventyfive" v-model="selected" @change="checkOption(selected)">
                <label for="seventyfive">75%</label><br>
                <input type="radio" id="fifty" value="fifty" v-model="selected" @change="checkOption(selected)">
                <label for="fifty">50%</label><br>
                <!--
                <input type="radio" id="optionOne" value="Keep cover" v-model="selected" @change="checkOption(selected)">
                <label for="optionOne">Opt to keep cover</label><br>
                <input type="radio" id="optionTwo" value="Lose cover" v-model="selected" @change="checkOption(selected)">
                <label for="optionTwo">Opt to lose cover</label><br>
                <input type="radio" id="optionThree" value="Contribute" v-model="selected" @change="checkOption(selected)">
                <label for="optionThree">Start contributing</label><br>
                <input type="radio" id="optionFour" value="Roll-in funds" v-model="selected" @change="checkOption(selected)">
                <label for="optionFour">Roll-in funds</label>-->
            </span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth','contentSize'],
    data() {
        return {
            selected: '',
        }
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        /*userData(){
            return this.$store.getters['tal/userdata'];
        },*/
        isOptionSelected () {
            return this.$store.getters['tal/isOptionSelected'];
        },
        pausePlayed () {
            return this.$store.getters['tal/pausePlayed'](this.currentTime, this.isOptionSelected)
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: {
        checkOption (v) {
            this.$store.commit('tal/selectOption', this.selected);
            this.$store.commit('tal/updateIsOptionSelected', true);
            this.$refs.options.style.display = "none";
        },
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    color: #000000;
    background: linear-gradient(to bottom, #E91E63 0%,  #8E24AA 100%);
    border-radius: 10px;
    margin: 3px;
    border: solid;
    text-align: left;
    width: 97%;
    font-size: 0.8em;
    font-weight: bold;
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: portrait) { 
    .input-wrapper {
    width: 138px;
    }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 225px;
    }
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 235px;
    }
}

/* samsung s3*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 190px;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 190px;
    }
}

/*iPad*/
@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: portrait) 
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        width: 240px;
        text-align: center;
    }
}

/*iPhone 5SE*/
@media screen 
  and (width: 320px) 
  and (height: 568px)
  and (-webkit-device-pixel-ratio: 2)
  and (orientation: portrait) {
    .input-wrapper{
    width: 105px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 480px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 160px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 160px;
    }
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    width: 205px;
    text-align: center;
  }
}

@media screen and (min-width: 992px) {
  .input-wrapper {
    width: 280px;
    text-align: center;
  }
}

.input-base {
    border: 1px solid #2196F3;
    border-radius: 10px;
}
</style>

i. SelectPercentage.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper" ref="options">
                <span :style="setInputStyl()"><u>{{ `${'Choose Option'}` }}</u><br>
                <input type="radio" id="yes" value="yes" v-model="y" @change="checkY(y)">
                <label for="yes">Yes</label><br>
                <input type="radio" id="no" value="no" v-model="n" @change="checkN(n)">
                <label for="no">No</label><br>
            </span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    //props: ['windowWidth', 'userInfo', 'welcome','info','warn','opt','balanceInfo','options', 'contentSize'],
    props: ['windowWidth','contentSize','selectOption'],
    data() {
        return {
            selected: '',
            y: '',
            n: ''
        }
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        isPercentageY () {
            return this.$store.getters['tal/isPercentageY'];
        },
        isPercentageN () {
            return this.$store.getters['tal/isPercentageN'];
        },
        isPercentageSelected () {
            return this.$store.getters['tal/isPercentageSelected'];
        },
        pausePlayedY () {
            return this.$store.getters['tal/pausePlayedY'](this.currentTime, this.isPercentageY)
        },
        pausePlayedN () {
            return this.$store.getters['tal/pausePlayedN'](this.currentTime, this.isPercentageN)
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: {
        checkPercentage (v) {
            this.$store.commit('tal/selectPercentage', this.selected);
            this.$store.commit('tal/updateIsPercentageSelected', true);
            this.$refs.options.style.display = "none";
        },
        checkY (v) {
            this.$store.commit('tal/selectY', this.y);
            this.$store.commit('tal/updateIsPercentageY', true);
            this.$refs.options.style.display = "none";
        },
        checkN (v) {
            this.$store.commit('tal/selectN', this.n);
            this.$store.commit('tal/updateIsPercentageN', true);
            this.$refs.options.style.display = "none";
        },
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    color: #000000;
    background: linear-gradient(to bottom, #2196F3 0%,  #8E24AA 100%);
    border-radius: 10px;
    margin: 3px;
    border: solid;
    text-align: left;
    width: 97%;
    font-size: 0.8em;
    font-weight: bold;
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: portrait) { 
    .input-wrapper {
    width: 138px;
    }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 225px;
    }
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 235px;
    }
}

/* samsung s3*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 190px;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 190px;
    }
}

/*iPad*/
@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: portrait) 
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        width: 240px;
        text-align: center;
    }
}

/*iPhone 5SE*/
@media screen 
  and (width: 320px) 
  and (height: 568px)
  and (-webkit-device-pixel-ratio: 2)
  and (orientation: portrait) {
    .input-wrapper{
    width: 105px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 480px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 160px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 160px;
    }
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    width: 205px;
    text-align: center;
  }
}

@media screen and (min-width: 992px) {
  .input-wrapper {
    width: 280px;
    text-align: center;
  }
}

.input-base {
    border: 1px solid #2196F3;
    border-radius: 10px;
}
</style>

m. SelectPeriod.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper" ref="options">
                <span :style="setInputStyl()"><u>{{ `${'Choose Period'}` }}</u><br>
                <input type="radio" id="forteen" value="forteen" v-model="selected" @change="checkPeriod(selected)">
                <label for="twoyears">14 Days</label><br>
                <input type="radio" id="thirty" value="thirty" v-model="selected" @change="checkPeriod(selected)">
                <label for="fiveyears">30 Days</label><br>
                <input type="radio" id="sixty" value="sixty" v-model="selected" @change="checkPeriod(selected)">
                <label for="fiveyears">60 Days</label><br>
                <input type="radio" id="ninety" value="ninety" v-model="selected" @change="checkPeriod(selected)">
                <label for="fiveyears">90 Days</label><br>
            </span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth','contentSize','selectOption','selectPercentage','selectYear','salaryInfo','inputDate'],
    data() {
        return {
            selected: ''
        }
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        isPeriodSelected () {
            return this.$store.getters['tal/isPeriodSelected'];
        },
        pausePlayedPeriod () {
            return this.$store.getters['tal/pausePlayedYear'](this.currentTime, this.isPeriodSelected)
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: {
        checkPeriod (v) {
            this.$store.commit('tal/selectPeriod', this.selected);
            this.$store.commit('tal/updateIsPeriodSelected', true);
            this.$refs.options.style.display = "none";
        },
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    color: #000000;
    background: linear-gradient(to bottom, #DAA520 0%, #8E24AA 100%);
    border-radius: 10px;
    margin: 3px;
    border: solid;
    text-align: left;
    width: 97%;
    font-size: 0.8em;
    font-weight: bold;
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: portrait) { 
    .input-wrapper {
    width: 138px;
    }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 225px;
    }
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 235px;
    }
}

/* samsung s3*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 190px;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 190px;
    }
}

/*iPad*/
@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: portrait) 
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        width: 240px;
        text-align: center;
    }
}

/*iPhone 5SE*/
@media screen 
  and (width: 320px) 
  and (height: 568px)
  and (-webkit-device-pixel-ratio: 2)
  and (orientation: portrait) {
    .input-wrapper{
    width: 105px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 480px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 160px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 160px;
    }
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    width: 205px;
    text-align: center;
  }
}

@media screen and (min-width: 992px) {
  .input-wrapper {
    width: 280px;
    text-align: center;
  }
}

.input-base {
    border: 1px solid #2196F3;
    border-radius: 10px;
}
</style>

n. SelectYear.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper" ref="options">
                <span :style="setInputStyl()"><u>{{ `${'Choose Year'}` }}</u><br>
                <input type="radio" id="twoyears" value="twoyears" v-model="selected" @change="checkYear(selected)">
                <label for="twoyears">2 Years</label><br>
                <input type="radio" id="fiveyears" value="fiveyears" v-model="selected" @change="checkYear(selected)">
                <label for="fiveyears">5 Years</label><br>
            </span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth','contentSize','selectOption','selectPercentage'],
    data() {
        return {
            selected: '',
        }
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        isYearSelected () {
            return this.$store.getters['tal/isYearSelected'];
        },
        pausePlayedYear () {
            return this.$store.getters['tal/pausePlayedYear'](this.currentTime, this.isYearSelected)
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: {
        checkYear (v) {
            this.$store.commit('tal/selectYear', this.selected);
            this.$store.commit('tal/updateIsYearSelected', true);
            this.$refs.options.style.display = "none";
        },
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    color: #000000;
    background: linear-gradient(to bottom, #E91E63 0%,  #DAA520 100%);
    border-radius: 10px;
    margin: 3px;
    border: solid;
    text-align: left;
    width: 97%;
    font-size: 0.8em;
    font-weight: bold;
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: portrait) { 
    .input-wrapper {
    width: 138px;
    }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 225px;
    }
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 235px;
    }
}

/* samsung s3*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 190px;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 190px;
    }
}

/*iPad*/
@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: portrait) 
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        width: 240px;
        text-align: center;
    }
}

/*iPhone 5SE*/
@media screen 
  and (width: 320px) 
  and (height: 568px)
  and (-webkit-device-pixel-ratio: 2)
  and (orientation: portrait) {
    .input-wrapper{
    width: 105px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 480px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 160px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 160px;
    }
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    width: 205px;
    text-align: center;
  }
}

@media screen and (min-width: 992px) {
  .input-wrapper {
    width: 280px;
    text-align: center;
  }
}

.input-base {
    border: 1px solid #2196F3;
    border-radius: 10px;
}
</style>

o. UserInfo.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper">
                <span :style="setInputStyl()">{{ name }}</span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['currentTime', 'windowWidth', 'contentSize'],

    data() {
        return {
            username: 'NewUser'
        }
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        isUserInfoSubmitted () {
            return this.$store.getters['tal/isUserInfoSubmitted']
        },
        name () {
            if(location.href.indexOf("DS00001") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "DS00001"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("GS00002") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "GS00002"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("AY00003") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "AY00003"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("RE00004") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "RE00004"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("JK00005") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JK00005"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("JP00006") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JP00006"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("PK00007") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "PK00007"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("VS00008") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "VS00008"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("YT00009") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "YT00009"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("JC00010") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JC00010"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("BN00011") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "BN00011"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("KL00012") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "KL00012"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else {
                this.$store.commit('tal/updateUserInfo', this.username)
                this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                localStorage.setItem('name', this.username);
                return this.username;
            }
        },

        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        userData(){
            return this.$store.getters['tal/userdata'];
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: {
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
        updateUserInfo (info) {
            this.$store.commit('tal/updateUserInfo', info)
        }
    }
}
</script>

<style scoped>
.input-wrapper {
    color: transparent;
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    color: transparent;
  }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrapper {
    color: transparent;
    }
}

@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: portrait) { 
    .input-wrapper {
    color: transparent;
    }
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    color: transparent;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrapper{
        color: transparent;
    }
}

/*iPhone 5SE*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 568px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    color: transparent;
    }
}

@media screen 
  and (width: 320px) 
  and (height: 568px)
  and (-webkit-device-pixel-ratio: 2)
  and (orientation: portrait) {
    .input-wrapper{
        color: transparent;
    }
}

/*iPad*/
@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: portrait) 
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        color: transparent;
    }
}

@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: landscape)
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        color: transparent;
    }
}

/*iPhone 4*/
@media only screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrapper{
    color: transparent;
    }
}

@media screen and (min-width: 992px) {
    .input-wrapper {
    color: transparent;
  }
}
</style>

p. VideoInfo.vue
<template>
    <v-menu bottom left open-on-click>
        <v-btn slot="activator" color="teal accent-4" small dark :icon="windowWidth < sizeParams.breaks.medium" id="crd">
            <v-icon dark :size="windowWidth > 0 ? '16' : '20'">timer</v-icon>
            <span v-if="windowWidth > sizeParams.breaks.medium" class="ml-1">COUNTDOWN</span>
        </v-btn>
        <v-list dense id="crd">
            <v-list-tile>
                <v-list-tile-content>
                    <v-list-tile-title>{{ `${'Current Time: ' + Math.round(currentTime * 100) / 100}` }}</v-list-tile-title>
                </v-list-tile-content>                                
            </v-list-tile>
            <v-list-tile>
                <v-list-tile-content>
                    <v-list-tile-title>{{ `${'Duration: ' + Math.round(duration * 100) / 100}` }}</v-list-tile-title>
                </v-list-tile-content>                                
            </v-list-tile>
            <!--
            <v-list-tile>
                <v-list-tile-content>
                    <v-list-tile-title>{{ `${'Status: ' + videoStatus}` }}</v-list-tile-title>
                </v-list-tile-content>                              
            </v-list-tile>-->                                                     
        </v-list>
    </v-menu>
</template>

<script>
export default {
    props: ['windowWidth', 'currentTime', 'duration', 'videoStatus'],
    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        }
    }
}
</script>

q. Warn.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper">
                <span :style="setInputStyl()"><u>{{ `${'Did you know'}` }}</u>?<br>
                Members having
                Account Balance less than $6,000
                </span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['windowWidth', 'userInfo', 'welcome','info', 'contentSize'],

    data() {
        return {}
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        userData(){
            return this.$store.getters['tal/userdata'];
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: {
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    color: #FFFFFF;
    background: linear-gradient(to bottom, #263238 0%, #E91E63 100%);
    border-radius: 10px;
    margin: 3px;
    border: solid;
    text-align: left;
    width: 35%;
    font-size: 0.8em;
    font-weight: bold;
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 190px;
    }
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 195px;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 160px;
    }
}

@media screen 
  and (min-width: 320px)
  and (max-width: 640px) 
  and (-webkit-device-pixel-ratio: 2) 
  and (orientation: landscape) {
      .input-wrapper{
        text-align: center;
        width: 160px;
    }
}

@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: portrait) { 
    .input-wrapper {
        width: 115px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 480px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 137px;
    }
}

/*iPhone 4*/
@media screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 137px;
    }
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    width: 170px;
    text-align: center;
  }
}

@media screen and (min-width: 992px) {
  .input-wrapper {
    width: 235px;
    text-align: center;
  }
}

.input-base {
    border: 1px solid #00BFA5;
    border-radius: 10px;
}
</style>

r. Welcome.vue
<template>
    <v-container id="scroll-target" :style="containerStyl" class="scroll-y pa-0">
        <v-layout v-scroll:#scroll-target="onScroll" column>
            <div class="input-wrapper">
                <span :style="setInputStyl()">{{ `${'Welcome ' + name + ','}` }}</span><br>
                <span :style="setInputStyl()">{{ `${'Insurance Cover'}` }}</span><br>
                <span :style="setInputStyl()">{{ `${'Death: ' + deathCover}` }}</span><br>
                <span :style="setInputStyl()">{{ `${'TPD: ' + tpdCover}` }}</span><br>
                <span :style="setInputStyl()">{{ `${'Premium: ' + premiumCover}` }}</span>
            </div>
        </v-layout>
    </v-container>
</template>

<script>
export default {
    props: ['userInfo', 'windowWidth', 'contentSize'],

    data() {
        return {
            //username: 'NewUser',
            death: 'NA',
            tpd: 'NA',
            premium: 'NA'
        }
    },

    computed: {
        sizeParams () {
            return this.$store.getters['video/sizeParams']
        },
        name () {
            return this.$store.getters['tal/userInfo']
        },
        userData(){
            return this.$store.getters['tal/userdata'];
        },
        /*isUserInfoSubmitted () {
            return this.$store.getters['tal/isUserInfoSubmitted']
        },*/
        /*name () {
            if(location.href.indexOf("DS00001") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "DS00001"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("GS00002") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "GS00002"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("AY00003") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "AY00003"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("RE00004") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "RE00004"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("JK00005") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JK00005"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("JP00006") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JP00006"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("PK00007") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "PK00007"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("VS00008") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "VS00008"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("YT00009") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "YT00009"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("JC00010") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JC00010"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("BN00011") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "BN00011"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else if(location.href.indexOf("KL00012") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "KL00012"){
                    this.username = this.userData[i].Username;
                    this.$store.commit('tal/updateUserInfo', this.userData[i].Username)
                    this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                    localStorage.setItem('name', this.username);
                    return this.username;
                }
             }
            }

            else {
                this.$store.commit('tal/updateUserInfo', this.username)
                this.$store.commit('tal/updateIsUserInfoSubmitted', true)
                localStorage.setItem('name', this.username);
                return this.username;
            }
        },*/

        deathCover () {
            if(location.href.indexOf("DS00001") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "DS00001"){
                    this.death = this.userData[i].Death;
                    return this.death;
                }
             }
            }

            else if(location.href.indexOf("GS00002") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "GS00002"){
                    this.death = this.userData[i].Death;
                    return this.death;
                }
             }
            } 

            else if(location.href.indexOf("AY00003") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "AY00003"){
                    this.death = this.userData[i].Death;
                    return this.death;
                }
             }
            }

            else if(location.href.indexOf("RE00004") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "RE00004"){
                    this.death = this.userData[i].Death;
                    return this.death;
                }
             }
            }

            else if(location.href.indexOf("JK00005") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JK00005"){
                    this.death = this.userData[i].Death;
                    return this.death;
                }
             }
            }

            else if(location.href.indexOf("JP00006") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JP00006"){
                    this.death = this.userData[i].Death;
                    return this.death;
                }
             }
            }

            else if(location.href.indexOf("PK00007") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "PK00007"){
                    this.death = this.userData[i].Death;
                    return this.death;
                }
             }
            }

            else if(location.href.indexOf("VS00008") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "VS00008"){
                    this.death = this.userData[i].Death;
                    return this.death;
                }
             }
            }

            else if(location.href.indexOf("YT00009") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "YT00009"){
                    this.death = this.userData[i].Death;
                    return this.death;
                }
             }
            }

            else if(location.href.indexOf("JC00010") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JC00010"){
                    this.death = this.userData[i].Death;
                    return this.death;
                }
             }
            }

            else if(location.href.indexOf("BN00011") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "BN00011"){
                    this.death = this.userData[i].Death;
                    return this.death;
                }
             }
            }

            else if(location.href.indexOf("KL00012") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "KL00012"){
                    this.death = this.userData[i].Death;
                    return this.death;
                }
             }
            }

            else {
                return this.death;
            }
        },

        tpdCover () {
            if(location.href.indexOf("DS00001") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "DS00001"){
                    this.tpd = this.userData[i].TPD;
                    return this.tpd;
                }
             }
            }

            else if(location.href.indexOf("GS00002") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "GS00002"){
                    this.tpd = this.userData[i].TPD;
                    return this.tpd;
                }
             }
            } 

            else if(location.href.indexOf("AY00003") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "AY00003"){
                    this.tpd = this.userData[i].TPD;
                    return this.tpd;
                }
             }
            }

            else if(location.href.indexOf("RE00004") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "RE00004"){
                    this.tpd = this.userData[i].TPD;
                    return this.tpd;
                }
             }
            }

            else if(location.href.indexOf("JK00005") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JK00005"){
                    this.tpd = this.userData[i].TPD;
                    return this.tpd;
                }
             }
            }

            else if(location.href.indexOf("JP00006") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JP00006"){
                    this.tpd = this.userData[i].TPD;
                    return this.tpd;
                }
             }
            }

            else if(location.href.indexOf("PK00007") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "PK00007"){
                    this.tpd = this.userData[i].TPD;
                    return this.tpd;
                }
             }
            }

            else if(location.href.indexOf("VS00008") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "VS00008"){
                    this.tpd = this.userData[i].TPD;
                    return this.tpd;
                }
             }
            }

            else if(location.href.indexOf("YT00009") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "YT00009"){
                    this.tpd = this.userData[i].TPD;
                    return this.tpd;
                }
             }
            }

            else if(location.href.indexOf("JC00010") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JC00010"){
                    this.tpd = this.userData[i].TPD;
                    return this.tpd;
                }
             }
            }

            else if(location.href.indexOf("BN00011") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "BN00011"){
                    this.tpd = this.userData[i].TPD;
                    return this.tpd;
                }
             }
            }

            else if(location.href.indexOf("KL00012") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "KL00012"){
                    this.tpd = this.userData[i].TPD;
                    return this.tpd;
                }
             }
            }

            else {
                return this.tpd;
            }
        },
        premiumCover () {
            if(location.href.indexOf("DS00001") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "DS00001"){
                    this.premium = this.userData[i].Premium;
                    return this.premium;
                }
             }
            }

            else if(location.href.indexOf("GS00002") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "GS00002"){
                    this.premium = this.userData[i].Premium;
                    return this.premium;
                }
             }
            } 

            else if(location.href.indexOf("AY00003") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "AY00003"){
                    this.premium = this.userData[i].Premium;
                    return this.premium;
                }
             }
            }

            else if(location.href.indexOf("RE00004") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "RE00004"){
                    this.premium = this.userData[i].Premium;
                    return this.premium;
                }
             }
            }

            else if(location.href.indexOf("JK00005") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JK00005"){
                    this.premium = this.userData[i].Premium;
                    return this.premium;
                }
             }
            }

            else if(location.href.indexOf("JP00006") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JP00006"){
                    this.premium = this.userData[i].Premium;
                    return this.premium;
                }
             }
            }

            else if(location.href.indexOf("PK00007") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "PK00007"){
                    this.premium = this.userData[i].Premium;
                    return this.premium;
                }
             }
            }

            else if(location.href.indexOf("VS00008") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "VS00008"){
                    this.premium = this.userData[i].Premium;
                    return this.premium;
                }
             }
            }

            else if(location.href.indexOf("YT00009") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "YT00009"){
                    this.premium = this.userData[i].Premium;
                    return this.premium;
                }
             }
            }

            else if(location.href.indexOf("JC00010") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "JC00010"){
                    this.premium = this.userData[i].Premium;
                    return this.premium;
                }
             }
            }

            else if(location.href.indexOf("BN00011") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "BN00011"){
                    this.premium = this.userData[i].Premium;
                    return this.premium;
                }
             }
            }

            else if(location.href.indexOf("KL00012") !=-1){
                for(var i=0; i<this.userData.length; i++){
                if(this.userData[i].URL == "KL00012"){
                    this.premium = this.userData[i].Premium;
                    return this.premium;
                }
             }
            }

            else {
                return this.premium;
            }
        },

        baseInputStyl () {
            return this.$store.getters['video/baseInputStyl'](this.windowWidth)
        },
        userData(){
            return this.$store.getters['tal/userdata'];
        },
        containerStyl () {
            return {
                'max-height': (this.contentSize.height - 60) + 'px',
                'overflow-x': 'hidden',
            }
        }
    },

    methods: {
        onScroll (e) {
            this.offsetTop = e.target.scrollTop
        },
        setInputStyl (key=null) {
            let { fontSize: fontSize, margin: margin, color: color } = this.baseInputStyl
            let styl = { 'font-size': fontSize + 'px', margin: margin + 'px', color: color}
            return styl
        },
        updateUserInfo (info) {
            this.$store.commit('tal/updateUserInfo', info)
        }
    }
}
</script>

<style scoped>
input, select{
  text-indent: 8px;
}

.input-wrapper {
    color: #263238;
    background: linear-gradient(to bottom, #E91E63 0%, #7B1FA2 100%);
    border-radius: 10px;
    border: solid;
    text-align: left;
    font-size: 0.8em;
    font-weight: bold;
    width: 100%;
}

/*iPhone 6,7*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 667px) 
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) { 
    .input-wrapper {
    width: 165px !important;
    text-align: center;
  }
}

/*iPhone 6+,7+*/
@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px)
  and (-webkit-min-device-pixel-ratio: 3) 
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 185px;
    }
}

@media only screen 
  and (min-width: 414px) 
  and (max-width: 736px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: portrait) { 
    .input-wrapper {
    width: 115px;
    }
}

/*iPhone X*/
@media only screen 
  and (min-width: 375px) 
  and (max-width: 812px) 
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) { 
    .input-wrapper {
    text-align: center;
    width: 187px;
    }
}

/* samsung s5*/
@media only screen 
  and (min-width: 320px)
  and (max-width: 640px)
  and (-webkit-min-device-pixel-ratio: 3)
  and (orientation: landscape) {
    .input-wrapper{
        text-align: center;
        width: 160px;
    }
}

/*iPhone 5SE*/
@media screen 
  and (min-width: 320px) 
  and (max-width: 568px)
  and (-webkit-min-device-pixel-ratio: 2)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 160px;
    }
}

@media screen 
  and (width: 320px) 
  and (height: 568px)
  and (-webkit-device-pixel-ratio: 2)
  and (orientation: portrait) {
    .input-wrapper{
        width: 90px;
        text-align: center;
    }
}

/*iPad*/
@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: portrait) 
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        width: 195px;
        text-align: center;
    }
}

@media only screen 
  and (min-width: 768px) 
  and (max-width: 1024px) 
  and (orientation: landscape)
  and (-webkit-min-device-pixel-ratio: 1) {
      .input-wrapper{
        text-align: center;
    }
}

/*iPhone 4*/
@media only screen 
  and (min-width: 320px)
  and (orientation: landscape) {
    .input-wrapper{
    text-align: center;
    width: 135px;
    }
}

@media screen and (min-width: 992px) {
    .input-wrapper {
    width: 220px;
    text-align: center;
  }
}

.input-base {
    border: 1px solid #00BFA5;
    border-radius: 10px;
}
</style>

C.video
1. DisableDiv.vue
<template>
    <div :style="styl"></div>
</template>

<script>
export default {
    props: ['contentSize'],
    computed: {
        styl () {
            return {
                width: this.contentSize.width + 'px',
                height: this.contentSize.height + 'px',
                'background-color': '#B0BEC5',
                opacity: '0.2',
                filter: 'alpha(opacity=20)'         
            }
        }
    }
}
</script>

2. LayoutDemo.vue
<template>
    <v-container fluid class="pa-1">
        <div class="center-horizontal">
            <v-layout align-center justify-center row fill-height>
                <v-layout column>
                    <v-checkbox v-model="custom" label="custom?" hide-details class="ma-0 pa-0"></v-checkbox>
                    <v-checkbox v-model="reverse" label="reverse?" hide-details class="ma-0 pa-0"></v-checkbox>   
                </v-layout>
                <v-layout row wrap>
                    <v-radio-group v-model="flexDirection">
                        <v-radio v-for="n in flexDirectionAvailable" :key="n" :label="n" :value="n"></v-radio>
                    </v-radio-group>
                </v-layout>
             

            </v-layout>
        </div>
        <v-layout column id="content">
            <v-layout v-bind="layoutAttributes">
                <div class="elevation-5" :style="sideBarStyl">
                    <span>SIDEBAR</span>
                </div>                 
                <div class="elevation-5" :style="outerStyl">
                    <video-player 
                        ref="videoPlayer"
                    >
                    </video-player>                    
                </div>
            </v-layout>
        </v-layout>
        <div class="center-horizontal">
            <v-layout align-center justify-center row fill-height>
                <span>FOOTER PLACEHOLDER</span>
            </v-layout>
        </div>
    </v-container>
</template>

<script>
export default {
    data() {
        return {
            windowWidth: 0,
            windowHeight: 0,
            sidebarSize: 60,
            custom: false,
            reverse: false,
            flexDirectionAvailable: ['row', 'column'],
            flexDirection: 'row'
        }
    },
    computed: {
        layoutAttributes () {
            if (this.custom) {
                return {
                    'align-center': true,
                    'justify-center': true,
                    [this.flexDirection]: true,
                    reverse: this.reverse                    
                }
            } else {
                return this.$store.getters['video/layoutAttributes'](this.windowWidth)
            }            
        },
        contentSize () {
            return this.$store.getters['video/contentSize'](this.windowWidth, this.windowHeight)
        },
        outerStyl () {
            return this.$store.getters['video/outerStyl'](this.contentSize)
        },
        sideBarStyl () {
            const hasRow = Object.keys(this.layoutAttributes).includes('row')
            const matchingDim = hasRow ? 'height' : 'width'
            const fixedDim = hasRow ? 'width' : 'height'
            return {
                [('min-' + matchingDim)]: this.contentSize[matchingDim] + 'px',
                [('min-' + fixedDim)]: this.sidebarSize + 'px',
                'background-color': 'red'
            }
        }
    },
    methods: {
        getWindowSize () {
            this.windowWidth = document.documentElement.clientWidth
            this.windowHeight = document.documentElement.clientHeight
        }
    },
    watch: {
        windowHeight () {
            if (this.windowHeight < this.contentSize.height) {
                console.log('smaller')
                this.$vuetify.goTo('#content')
            }
        }
    },
    mounted() {
        this.$nextTick(function() {
            window.addEventListener('resize', this.getWindowSize)
            this.getWindowSize()
        })
    },
    beforeDestroy() {
        window.removeEventListener('resize', this.getWindowSize)
    },
    components: {

    }
}
</script>

<style scoped>
.center-horizontal {
    display: table;
    margin: 0 auto;
    height: 80px;
    max-height: 80px;
    width: 300px;
    background-color: cornsilk;
}
</style>

3. css
main.css
html { 
    overflow-y: auto;
}

#app {
    background-color: #000000;
}

/* input styles */
input:focus { 
    outline: none;
    border-radius: 10px;
}

/* buttons */
.v-btn {
    height: 22px;
    font-size: 14px;
    padding: 0 8px;
}

.v-btn--small {
    height: 20px;
    font-size: 12px;
    padding: 0 4px;
}

.v-btn--large {
    height: 24px;
    font-size: 16px;
    padding: 0 16px;
}

/* inputs */
/* .v-text-field {
    margin-top: 3px;
    margin-left: 5px;
    margin-right: 5px;
    margin-bottom: 3px;
    border: groove;
    border-radius: 5px;
}

.v-input__control > .v-input__slot {
    height: 20px;
}

.v-text-field__slot, .v-select__slot {
    margin-bottom: 10px;
}

.v-label--active {
    display: none;
}

.v-input input {
    font-size: 0.8em;
}

.v-input .v-label {
    font-size: 0.8em;
} */

/* scrollbar */
/* width */
::-webkit-scrollbar {
    width: 5px;
}

/* Track */
::-webkit-scrollbar-track {
    background: #f1f1f1; 
}

/* Handle */
::-webkit-scrollbar-thumb {
    background: #888; 
}

/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
    background: #555; 
}

4. data
a. userdata.js
html { 
    overflow-y: auto;
}

#app {
    background-color: #000000;
}

/* input styles */
input:focus { 
    outline: none;
    border-radius: 10px;
}

/* buttons */
.v-btn {
    height: 22px;
    font-size: 14px;
    padding: 0 8px;
}

.v-btn--small {
    height: 20px;
    font-size: 12px;
    padding: 0 4px;
}

.v-btn--large {
    height: 24px;
    font-size: 16px;
    padding: 0 16px;
}

/* inputs */
/* .v-text-field {
    margin-top: 3px;
    margin-left: 5px;
    margin-right: 5px;
    margin-bottom: 3px;
    border: groove;
    border-radius: 5px;
}

.v-input__control > .v-input__slot {
    height: 20px;
}

.v-text-field__slot, .v-select__slot {
    margin-bottom: 10px;
}

.v-label--active {
    display: none;
}

.v-input input {
    font-size: 0.8em;
}

.v-input .v-label {
    font-size: 0.8em;
} */

/* scrollbar */
/* width */
::-webkit-scrollbar {
    width: 5px;
}

/* Track */
::-webkit-scrollbar-track {
    background: #f1f1f1; 
}

/* Handle */
::-webkit-scrollbar-thumb {
    background: #888; 
}

/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
    background: #555; 
}

b. videodata.js
export default [
    {
        "Death": "$15,000",
        "TPD": "$10,000",
        "Premium": "$20"
    }
]

5. router
index.js
import Vue from 'vue'
import VueRouter from 'vue-router'
import NotFound from '@/components/page/NotFound'
import Content from '@/components/tal/Content'
import ContentNotapple from '@/components/tal/ContentNotapple'
import ContentNotappleTwo from '@/components/tal/ContentNotappleTwo'
import ContentNotappleThree from '@/components/tal/ContentNotappleThree'
import Tal from '@/components/tal/Tal'
import LayoutDemo from '@/components/video/LayoutDemo'

Vue.use(VueRouter)

const routes = [
  { 
    path: '/', 
    name: 'Tal', 
    component: Tal 
  },
  { 
    path: '/layer', 
    name: 'LayoutDemo', 
    component: LayoutDemo 
  },  
  { 
    path: '/notfound', 
    name: 'NotFound', 
    component: NotFound
  },
  { 
    path: '*', 
    name: 'All', 
    component: Tal 
  }
]

const Router = new VueRouter({
  mode: 'history',
  routes
})

export default Router

5. store
auth
index.js
import Vue from 'vue'
import VueRouter from 'vue-router'
import NotFound from '@/components/page/NotFound'
import Content from '@/components/tal/Content'
import ContentNotapple from '@/components/tal/ContentNotapple'
import ContentNotappleTwo from '@/components/tal/ContentNotappleTwo'
import ContentNotappleThree from '@/components/tal/ContentNotappleThree'
import Tal from '@/components/tal/Tal'
import LayoutDemo from '@/components/video/LayoutDemo'

Vue.use(VueRouter)

const routes = [
  { 
    path: '/', 
    name: 'Tal', 
    component: Tal 
  },
  { 
    path: '/layer', 
    name: 'LayoutDemo', 
    component: LayoutDemo 
  },  
  { 
    path: '/notfound', 
    name: 'NotFound', 
    component: NotFound
  },
  { 
    path: '*', 
    name: 'All', 
    component: Tal 
  }
]

const Router = new VueRouter({
  mode: 'history',
  routes
})

export default Router

tal
const state = {
    salaryInfo: '',
    isSalaryInfoSubmitted: false,
    datepickerInfo: '',
    isDatepickerInfoSubmitted: false,
    pausePlayed: false,
    pausePlayedY: false,
    pausePlayedN: false,
    pausePlayedYear: false,
    pausePlayedPeriod: false,
    pausePlayedSalary: false,
    pausePlayedDatepicker: false,
    selectOption: '',
    isOptionSelected: false,
    selectPercentage: '',
    isPercentageSelected: false,
    selectY: '',
    isPercentageY: false,
    selectN: '',
    isPercentageN: false,
    selectYear: '',
    isYearSelected: false,
    selectPeriod: '',
    isPeriodSelected: false,
  }

  const getters = {
    salaryInfo (state) {
      return state.salaryInfo
    },
    isSalaryInfoSubmitted (state) {
      return state.isSalaryInfoSubmitted
    },
    datepickerInfo (state) {
      return state.datepickerInfo
    },
    isDatepickerInfoSubmitted (state) {
      return state.isDatepickerInfoSubmitted
    },
    pausePlayedSalary (state) {
      return (currentTime, isSalaryInfoSubmitted) => {
          if (currentTime > 111.8 && !isSalaryInfoSubmitted) {
          return true
        } else {
          return false
        }
      }
    },
    pausePlayedDatepicker (state) {
      return (currentTime, isDatepickerInfoSubmitted) => {
          if (currentTime > 115.7 && !isDatepickerInfoSubmitted) {
          return true
        } else {
          return false
        }
      }
    },
    pausePlayed (state) {
      return (currentTime, isOptionSelected) => {
          if (currentTime > 95 && !isOptionSelected) {
          return true
        } else {
          return false
        }
      }
    },
    pausePlayedY (state) {
      return (currentTime, isPercentageY) => {
          if (currentTime > 105 && !isPercentageY) {
          return true
        } else {
          return false
        }
      }
    },
    pausePlayedN (state) {
      return (currentTime, isPercentageN) => {
          if (currentTime > 105 && !isPercentageN) {
          return true
        } else {
          return false
        }
      }
    },
    pausePlayedYear (state) {
      return (currentTime, isYearSelected) => {
          if (currentTime > 109 && !isYearSelected) {
          return true
        } else {
          return false
        }
      }
    },
    pausePlayedPeriod (state) {
      return (currentTime, isPeriodSelected) => {
          if (currentTime > 122 && !isPeriodSelected) {
          return true
        } else {
          return false
        }
      }
    },
    selectOption(state){
      return state.selectOption
    },
    isOptionSelected (state) {
      return state.isOptionSelected
    },
    selectPercentage(state){
      return state.selectedPercentage
    },
    isPercentageSelected (state) {
      return state.isPercentageSelected
    },
    selectY(state){
      return state.selectY
    },
    isPercentageY (state) {
      return state.isPercentageY
    },
    selectN(state){
      return state.selectN
    },
    isPercentageN (state) {
      return state.isPercentageN
    },
    selectYear(state){
      return state.selectYear
    },
    isYearSelected (state) {
      return state.isYearSelected
    },
    selectPeriod(state){
      return state.selectPeriod
    },
    isPeriodSelected (state) {
      return state.isPeriodSelected
    }
  }
  
  const mutations = {
    selectOption(state, payload){
      state.selectOption = payload
    },
    updateIsOptionSelected (state, payload) {
      state.isOptionSelected = payload
    },
    selectPercentage(state, payload){
      state.selectedPercentage = payload
    },
    updateIsPercentageSelected (state, payload) {
      state.isPercentageSelected = payload
    },
    selectY(state, payload){
      state.selectY = payload
    },
    updateIsPercentageY (state, payload) {
      state.isPercentageY = payload
    },
    selectN(state, payload){
      state.selectN = payload
    },
    updateIsPercentageN (state, payload) {
      state.isPercentageN = payload
    },
    selectYear(state, payload){
      state.selectedYear = payload
    },
    updateIsYearSelected (state, payload) {
      state.isYearSelected = payload
    },
    selectPeriod(state, payload){
      state.selectedPeriod = payload
    },
    updateIsPeriodSelected (state, payload) {
      state.isPeriodSelected = payload
    },
    updateSalaryInfo (state, payload) {
      let info = state.salaryInfo
      info[payload.key] = payload.value
      state.salaryInfo = info
    },
    updateIsSalaryInfoSubmitted (state, payload) {
      state.isSalaryInfoSubmitted = payload
    },
    updateDatepickerInfo (state, payload) {
      let info = state.datepickerInfo
      info[payload.key] = payload.value
      state.datepickerInfo = info
    },
    updateIsDatepickerInfoSubmitted (state, payload) {
      state.isDatepickerInfoSubmitted = payload
    }
  }
  
  const actions = {}
  
  export default {
    namespaced: true,
    state,
    getters,
    mutations,
    actions
  }
  
  video
  const updateParams = (params) => {
  const breaks = { large: params.maxWidth, medium: params.mediumWidth, small: params.smallWidth }
  const aspectRatio = params.maxWidth / params.maxHeight
  const sidebarSize = 70
  return Object.assign(params, { aspectRatio: aspectRatio }, { breaks: breaks }, { sidebarSize: sidebarSize } )  
}

const isFlexRow = (layout) => {
  return Object.keys(layout).includes('row')
}

const state = {
  sizeParams: {
    maxWidth: 800,
    maxHeight: 450,
    mediumWidth: 600,
    smallWidth: 350,
    minVideoWidth: 250,
    minVideoHeight: 200,
    contentMargin: 20
  },
  windowSize: {
    width: 0,
    height: 0
  }
}

const getters = {
  sizeParams (state) {
    return updateParams(state.sizeParams)
  },
  windowSize (state) {
    return state.windowSize
  },
  contentSize (state) {
    const params = updateParams(state.sizeParams)
    return (windowWidth, windowHeight) => {
      let width = null
      let height = null
      if (windowHeight < params.minVideoHeight) {
          height = params.minVideoHeight
          width = Math.floor(height * params.aspectRatio)
      } else if (windowWidth < params.minVideoWidth) {
          width = params.minVideoWidth
          height = Math.ceil(width/params.aspectRatio)
      } else {
          const extraOffset = windowWidth > params.breaks.medium ? params.sidebarSize : 0
          width = Math.min(windowWidth-params.contentMargin-extraOffset, params.maxWidth)            
          while (true) {
              height = Math.ceil(width/params.aspectRatio)
              if (windowHeight < height) {
                  height = height - 1
                  width = Math.floor(height * params.aspectRatio)
              } else {
                  break
              }
          }
      }
      return { width: width, height: height }
    }
  },
  baseInputStyl (state) {
    const params = updateParams(state.sizeParams)
    return (windowWith) => {
      if (windowWith > params.breaks.large) {
        return { fontSize: 18, margin: 4 }
      } else if (windowWith > params.breaks.medium) {
        return { fontSize: 15, margin: 3 }
      } else {
        return { fontSize: 12, margin: 2 }
      }
    }
  },
  overlayStyl (state) {
    return (contentSize) => {
      const isValid = (v) => v !== null && v >= 0 && v <= 1
      const setStyl = (zIndex, top=null, bottom=null, left=null, right=null) => {
        const t = isValid(top) ? { top: Math.floor(contentSize.height * top) + 'px' } : {}
        const b = isValid(bottom) ? { bottom: Math.floor(contentSize.height * bottom) + 'px' } : {}
        const l = isValid(left) ? { left: Math.floor(contentSize.width * left) + 'px' } : {}
        const r = isValid(right) ? { right: Math.floor(contentSize.width * right) + 'px' } : {}
        let styl = { position: 'absolute', 'z-index': zIndex }
        return Object.assign(styl, t, b, l, r)
      }
      return setStyl
    }
  },
  outerStyl (state) {
    return (contentSize) => {
      return { 
        position: 'relative', 
        width: contentSize.width + 'px',
        height: contentSize.height + 'px'
      }
    }
  },
  layoutAttributes (state) {
    const params = updateParams(state.sizeParams)
    return (windowWidth) => {
      return {
        'align-center': true,
        'justify-center': true,
        [(windowWidth < params.breaks.medium ? 'column' : 'row')]: true,
        reverse: windowWidth < params.breaks.medium
      }
    }
  },
  sideLayoutAttributes (state) {
    return (layoutAttributes) => {
      const isRow = isFlexRow(layoutAttributes)
      return {
        'align-start': true,
        'justify-start': true,
        [(isRow ? 'column' : 'row')]: true        
      }
    }
  },
  sideBarStyl (state) {
    return (layoutAttributes, contentSize, sizeParams) => {
      const isRow = isFlexRow(layoutAttributes)
      const matchingDim = isRow ? 'height' : 'width'
      const fixedDim = isRow ? 'width' : 'height'
      return {
        [('min-' + matchingDim)]: contentSize[matchingDim] + 'px',
        [('min-' + fixedDim)]: sizeParams.sidebarSize + 'px'
      }      
    }
  },
  sideItemStyl (state) {
    return (sizeParams) => {
      const size = sizeParams.sidebarSize + 'px'
      return {
          height: size,
          'max-height': size,
          width: size,
          'max-width': size
      }
    }
  },
  sideLeftOverStyl (state) {
    return (layoutAttributes, contentSize, sizeParams, numIcons) => {
      const isRow = isFlexRow(layoutAttributes)
      const sidebarSize = sizeParams.sidebarSize
      const totalSize = isRow ? contentSize.height : contentSize.width
      const size = Math.floor(totalSize - numIcons * sidebarSize)
      return {
          height: (isRow ? size : sidebarSize) + 'px',
          'max-height': (isRow ? size : sidebarSize) + 'px',
          width: (isRow ? sidebarSize : size) + 'px',
          'max-width': (isRow ? sidebarSize : size) + 'px'
        }
    }
  }
}

const mutations = {
  updateWindowSize (state, payload) {
    state.windowSize = payload
  }
}

const actions = {}

export default {
  namespaced: true,
  state,
  getters,
  mutations,
  actions
}

index.js
import Vue from 'vue'
import Vuex from 'vuex'
import auth from './auth'
import video from './video'
import tal from './tal'
//import createPersistedState from 'vuex-persistedstate'
Vue.use(Vuex)

const store = new Vuex.Store({
    /*plugins: [createPersistedState({
        paths: ['tal.userInfo','tal.selectedOption','tal.lastVisitTime']
    })],*/

    /*plugins: [createPersistedState({
      paths: ['auth.user']
    })],*/

    //plugins: [createPersistedState()],

    modules: {
      auth,
      video,
      tal
    },

    state: {},
    getters: {},
    mutations: {},
    actions: {}
})

export default store

App.vue
<template>
  <v-app dark>
    <v-layout row wrap align-center>
      <v-flex xs12 id="prlx">
    <v-layout
      align-center
      column
    >
      <main>
            <router-view></router-view>
      </main>
    </v-layout>
  </v-flex>
  </v-layout>
  </v-app>
</template>

<script>
export default {
  data () {
    return {
      //siteCounter: localStorage.getItem('WebsiteLoadingCounter'),
    }
  },
  name: 'App',
  /*computed: {},
  methods: {
      siteVisitCounter() {
              if(this.siteCounter === null){
                this.siteCounter = 0
              }
              this.siteCounter++;
              localStorage.setItem("WebsiteLoadingCounter", this.siteCounter);
              console.log("WebsiteLoadingCounter: " +localStorage.WebsiteLoadingCounter);
      }
  },
  mounted(){
    this.siteVisitCounter();
  }*/
}
</script>

<style scoped>
html { 
  overflow-y: auto;
}

#prlx{
  overflow-y: auto;
  height: 100%;
  min-height: 100% !important;
}
</style>

eventBus.js
import Vue from 'vue'

const eventBus = new Vue({
    methods: {
      playAudio() {
        this.$emit('playAudio')
      }
    }
  })

export default eventBus

main.js
import Vue from 'vue'
import 'babel-polyfill'
import 'es6-promise/auto'
import Es6Promise from 'es6-promise'
Es6Promise.Promise
Es6Promise.polyfill()
import App from './App'
import store from './store/index'
import router from './router'
import Vuetify from 'vuetify'
import 'vuetify/dist/vuetify.min.css'
import axios from 'axios'
import Vuex from 'vuex'
import VueVideoPlayer from 'vue-video-player'
import 'video.js/dist/video-js.css'
//import datepicker from 'vue-date-picker'
//import Datepicker from 'vuejs-datepicker';
Vue.use(VueVideoPlayer)
Vue.use(Vuetify)
Vue.use(Vuex)
//Vue.use(datepicker)
//Vue.use(Datepicker)
window.axios = axios
Vue.config.productionTip = false

new Vue({
  el: '#app',
  router,
  store,
  components: { App },
  template: '<App/>'
})

static folder > workspace > content > audio,video,images

package.json
{
  "name": "test-project",
  "version": "1.0.0",
  "description": "A Vue.js project",
  "author": "Galib",
  "private": true,
  "scripts": {
    "dev": "webpack-dev-server --inline --progress --hot --open --config build/webpack.dev.conf.js",
    "start": "npm run dev",
    "unit": "cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run",
    "e2e": "node test/e2e/runner.js",
    "test": "npm run unit && npm run e2e",
    "lint": "eslint --ext .js,.vue src test/unit/specs test/e2e/specs",
    "build": "node build/build.js"
  },
  "dependencies": {
    "axios": "^0.18.0",
    "babel-polyfill": "^6.26.0",
    "es6-promise": "^4.2.6",
    "highcharts": "^6.1.1",
    "highcharts-vue": "^1.2.0",
    "jspdf": "^1.5.3",
    "jspdf-autotable": "^3.0.0-alpha.3",
    "video.js": "^7.3.0",
    "vue": "^2.5.2",
    "vue-adal": "^1.3.1",
    "vue-axios": "^2.1.3",
    "vue-canvasvideo": "^1.0.0",
    "vue-date-picker": "^2.5.0",
    "vue-draggable-resizable": "^1.7.3",
    "vue-json-excel": "^0.2.83",
    "vue-loading-spinner": "^1.0.11",
    "vue-resource": "^1.5.1",
    "vue-router": "^3.0.1",
    "vue-select": "^2.4.0",
    "vue-video-background": "^0.1.2",
    "vue-video-player": "^5.0.2",
    "vue-videobg": "^2.0.0",
    "vue2-highcharts": "^1.2.5",
    "vuejs-datepicker": "^1.5.4",
    "vuetify": "^1.0.0",
    "vuex": "^3.0.1",
    "vuex-persistedstate": "^2.5.4"
  },
  "devDependencies": {
    "autoprefixer": "^7.1.2",
    "babel-core": "^6.22.1",
    "babel-eslint": "^7.1.1",
    "babel-helper-vue-jsx-merge-props": "^2.0.3",
    "babel-loader": "^7.1.1",
    "babel-plugin-istanbul": "^4.1.1",
    "babel-plugin-syntax-jsx": "^6.18.0",
    "babel-plugin-transform-runtime": "^6.22.0",
    "babel-plugin-transform-vue-jsx": "^3.5.0",
    "babel-preset-env": "^1.3.2",
    "babel-preset-stage-2": "^6.22.0",
    "babel-register": "^6.22.0",
    "chai": "^4.1.2",
    "chalk": "^2.0.1",
    "chromedriver": "^2.27.2",
    "copy-webpack-plugin": "^4.0.1",
    "cross-env": "^5.0.1",
    "cross-spawn": "^5.0.1",
    "css-loader": "^0.28.0",
    "eslint": "^3.19.0",
    "eslint-config-standard": "^10.2.1",
    "eslint-friendly-formatter": "^3.0.0",
    "eslint-loader": "^1.7.1",
    "eslint-plugin-html": "^3.0.0",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-node": "^5.2.0",
    "eslint-plugin-promise": "^3.4.0",
    "eslint-plugin-standard": "^3.0.1",
    "extract-text-webpack-plugin": "^3.0.0",
    "file-loader": "^1.1.4",
    "friendly-errors-webpack-plugin": "^1.6.1",
    "html-webpack-plugin": "^2.30.1",
    "inject-loader": "^3.0.0",
    "karma": "^1.4.1",
    "karma-coverage": "^1.1.1",
    "karma-mocha": "^1.3.0",
    "karma-phantomjs-launcher": "^1.0.2",
    "karma-phantomjs-shim": "^1.4.0",
    "karma-sinon-chai": "^1.3.1",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-spec-reporter": "0.0.31",
    "karma-webpack": "^2.0.2",
    "mocha": "^3.2.0",
    "nightwatch": "^0.9.12",
    "node-notifier": "^5.1.2",
    "optimize-css-assets-webpack-plugin": "^3.2.0",
    "ora": "^1.2.0",
    "phantomjs-prebuilt": "^2.1.14",
    "portfinder": "^1.0.13",
    "postcss-import": "^11.0.0",
    "postcss-loader": "^2.0.8",
    "postcss-url": "^7.2.1",
    "rimraf": "^2.6.0",
    "selenium-server": "^3.0.1",
    "semver": "^5.3.0",
    "shelljs": "^0.7.6",
    "sinon": "^4.0.0",
    "sinon-chai": "^2.8.0",
    "uglifyjs-webpack-plugin": "^1.1.1",
    "url-loader": "^0.5.8",
    "vue-loader": "^13.3.0",
    "vue-style-loader": "^3.0.1",
    "vue-template-compiler": "^2.5.2",
    "webpack": "^3.6.0",
    "webpack-bundle-analyzer": "^2.9.0",
    "webpack-dev-server": "^2.9.1",
    "webpack-merge": "^4.1.0"
  },
  "engines": {
    "node": ">= 6.0.0",
    "npm": ">= 3.0.0"
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not ie <= 8"
  ]
}

*nodejs
var port = 3000;
var express = require('express');
var app = express();
var sql = require('mssql');
var dbConfig = {
    server: '',
    database: '',
    user: '',
    password: '',
    options: {
      encrypt: true
    }
  }

  var server = app.listen(port, function () {
    var host = server.address().address
    var port = server.address().port
    console.log("API running at http://%s:%s", host, port)
});

app.use(function (req, res, next) {
    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8080');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');
    res.setHeader('Access-Control-Allow-Credentials', true);
    next();
});

app.get('/naof', function (req, res) {
    sql.close();
    sql.connect(dbConfig, function() {
        var request = new sql.Request();
            request.query(
                "SELECT TOP (10) * FROM [table]"
            , function(err, recordset) {
            if(err) console.log(err);
            res.end(JSON.stringify(recordset)); // Result in JSON format
        });
    });
})

app.get('/pbri', function (req, res) {
    sql.close();
    sql.connect(dbConfig, function() {
        var request = new sql.Request();
        request.query(
            "SELECT TOP (10) * FROM [table]"
            , function(err, recordset) {
            if(err) console.log(err);
            res.end(JSON.stringify(recordset)); // Result in JSON format
        });
    });
})


